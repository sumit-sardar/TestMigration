ALTER TABLE STUDENT_ITEM_SET_STATUS
 ADD (TMS_UPDATE  VARCHAR2(1));
 
 ALTER TABLE TEST_ROSTER
 ADD (TMS_UPDATE  VARCHAR2(1));
 
 
CREATE TABLE TMS_PRIM_CACHE_PREPOP
(
  Test_ROSTER_ID  NUMBER                        NOT NULL,
  node_id         NUMBER
)
TABLESPACE DATA1
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
NOMONITORING;

CREATE TABLE TMS_SEC_CACHE_PREPOP
(
  Test_ROSTER_ID  NUMBER                        NOT NULL,
  node_id         NUMBER
)
TABLESPACE DATA1
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
NOMONITORING;

CREATE OR REPLACE TRIGGER SET_TMS_UPDATE
BEFORE  INSERT OR UPDATE ON STUDENT_ITEM_SET_STATUS REFERENCING
 NEW AS NEW
 OLD AS OLD
FOR EACH ROW
DECLARE
BEGIN

   IF not updating('TMS_UPDATE') THEN 
    :NEW.TMS_UPDATE := 'F';
    insert into tms_prim_cache_prepop (test_roster_id) values (:new.test_roster_id);
   END IF; 

   EXCEPTION
     WHEN OTHERS THEN RAISE;
END SET_TMS_UPDATE;
/

CREATE OR REPLACE TRIGGER SET_TMS_ROSTER_UPDATE
BEFORE  INSERT OR UPDATE ON TEST_ROSTER REFERENCING
 NEW AS NEW
 OLD AS OLD
FOR EACH ROW
DECLARE
BEGIN

   IF not updating('TMS_UPDATE') THEN 
    :NEW.TMS_UPDATE := 'F';
    insert into tms_prim_cache_prepop (test_roster_id) values (:new.test_roster_id);
   END IF; 

   EXCEPTION
     WHEN OTHERS THEN RAISE;
END SET_TMS_ROSTER_UPDATE;
/

CREATE OR REPLACE TRIGGER TMS_PRIM_TO_SEC_PREPOP
BEFORE  DELETE ON TMS_PRIM_CACHE_PREPOP REFERENCING
 OLD AS OLD
FOR EACH ROW
DECLARE
BEGIN

    insert into tms_sec_cache_prepop (test_roster_id) values (:old.test_roster_id);

   EXCEPTION
     WHEN OTHERS THEN RAISE;
END TMS_PRIM_TO_SEC_PREPOP;
/

CREATE OR REPLACE TRIGGER SET_TMS_ADMIN_UPDATE
AFTER  UPDATE ON TEST_ADMIN REFERENCING
 NEW AS NEW
 OLD AS OLD
FOR EACH ROW
DECLARE
BEGIN

   IF :OLD.test_admin_status != 'CU' and :NEW.test_admin_status = 'CU' THEN 
    insert into tms_prim_cache_prepop select test_roster_id, null as node_id from test_roster ros where ros.test_admin_id = :NEW.test_admin_id;
   END IF; 

   EXCEPTION
     WHEN OTHERS THEN RAISE;
END SET_TMS_ADMIN_UPDATE;
/