CREATE OR REPLACE PROCEDURE SP_LAS_LM_PO_EXPIRY_UPDATE AS

  CURSOR CUR_EXPIRED_PO_INFO IS
    SELECT CPL.CUSTOMER_ID, CPL.ORDER_INDEX
      FROM CUSTOMER_PRODUCT_LICENSE CPL, CUSTOMER_CONFIGURATION CC
     WHERE TRUNC(CPL.LICENSE_PERIOD_END) = TRUNC(SYSDATE - 1)
       AND CPL.CUSTOMER_ID = CC.CUSTOMER_ID
       AND CC.CUSTOMER_CONFIGURATION_NAME = 'License_Yearly_Expiry';

  TYPE CUR_EXPIRED_PO_INFO_REC IS RECORD(
    CUSTOMER_ID INTEGER,
    ORDER_INDEX INTEGER);

  TYPE CUR_EXPIRED_PO_INFO_TAB IS TABLE OF CUR_EXPIRED_PO_INFO_REC;
  V_CUR_EXPIRED_PO_INFO CUR_EXPIRED_PO_INFO_TAB;

  CURSOR CUR_EXPIRED_OOL_INFO(V_ORDER_INDEX INTEGER) IS
    SELECT OOL.ORG_NODE_ID, OOL.AVAILABLE, OOL.ORDER_INDEX
      FROM ORGNODE_ORDER_LICENSE OOL
     WHERE OOL.ORDER_INDEX = V_ORDER_INDEX;

  TYPE CUR_EXPIRED_OOL_INFO_REC IS RECORD(
    ORG_NODE_ID INTEGER,
    AVAILABLE   INTEGER,
    ORDER_INDEX INTEGER);

  TYPE CUR_EXPIRED_OOL_INFO_TAB IS TABLE OF CUR_EXPIRED_OOL_INFO_REC;
  V_CUR_EXPIRED_OOL_INFO CUR_EXPIRED_OOL_INFO_TAB;

  -- checks whether the node is leaf node or not
  FUNCTION CHECK_FOR_LEAF_NODE(V_ORG_NODE_ID CUSTOMER_ORGNODE_LICENSE.ORG_NODE_ID%TYPE,
                               V_CUSTOMER_ID CUSTOMER.CUSTOMER_ID%TYPE)
    RETURN VARCHAR2 IS
    V_IS_LEAF_NODE VARCHAR2(10);
  BEGIN
    SELECT DECODE(COUNT(1), 0, 'FALSE', 'TRUE')
      INTO V_IS_LEAF_NODE
      FROM ORG_NODE ORG, ORG_NODE_CATEGORY ONC
     WHERE ORG.ORG_NODE_CATEGORY_ID = ONC.ORG_NODE_CATEGORY_ID
       AND ONC.CATEGORY_LEVEL =
           (SELECT MAX(CATEGORY_LEVEL)
              FROM ORG_NODE_CATEGORY
             WHERE CUSTOMER_ID = V_CUSTOMER_ID
               AND ACTIVATION_STATUS = 'AC')
       AND ORG.ORG_NODE_ID = V_ORG_NODE_ID
       AND ORG.CUSTOMER_ID = v_CUSTOMER_ID;
    RETURN V_IS_LEAF_NODE;
  END;

BEGIN

  OPEN CUR_EXPIRED_PO_INFO;
  FETCH CUR_EXPIRED_PO_INFO BULK COLLECT
    INTO V_CUR_EXPIRED_PO_INFO;
  CLOSE CUR_EXPIRED_PO_INFO;

  FOR I IN 1 .. V_CUR_EXPIRED_PO_INFO.COUNT LOOP
    OPEN CUR_EXPIRED_OOL_INFO(V_CUR_EXPIRED_PO_INFO(I).ORDER_INDEX);
    FETCH CUR_EXPIRED_OOL_INFO BULK COLLECT
      INTO V_CUR_EXPIRED_OOL_INFO;
    CLOSE CUR_EXPIRED_OOL_INFO;
    FOR J IN 1 .. V_CUR_EXPIRED_OOL_INFO.COUNT LOOP
      UPDATE CUSTOMER_ORGNODE_LICENSE
         SET AVAILABLE = AVAILABLE - V_CUR_EXPIRED_OOL_INFO(J).AVAILABLE
       WHERE ORG_NODE_ID = V_CUR_EXPIRED_OOL_INFO(J)
      .ORG_NODE_ID
         AND CUSTOMER_ID = V_CUR_EXPIRED_PO_INFO(I).CUSTOMER_ID;
    
      IF CHECK_FOR_LEAF_NODE(V_CUR_EXPIRED_OOL_INFO(J).ORG_NODE_ID,
                             V_CUR_EXPIRED_PO_INFO(I).CUSTOMER_ID) = 'TRUE' THEN
        UPDATE ORGNODE_ORDER_LICENSE
           SET AVAILABLE          = 0,
               LAST_LICENSE_COUNT = LAST_LICENSE_COUNT -
                                    V_CUR_EXPIRED_OOL_INFO(J).AVAILABLE
         WHERE ORDER_INDEX = V_CUR_EXPIRED_OOL_INFO(J).ORDER_INDEX
           AND ORG_NODE_ID = V_CUR_EXPIRED_OOL_INFO(J).ORG_NODE_ID;
      ELSE
        UPDATE ORGNODE_ORDER_LICENSE
           SET AVAILABLE = 0
         WHERE ORDER_INDEX = V_CUR_EXPIRED_OOL_INFO(J).ORDER_INDEX
           AND ORG_NODE_ID = V_CUR_EXPIRED_OOL_INFO(J).ORG_NODE_ID;
      END IF;
    END LOOP; --INNER LOOP J
  
    UPDATE CUSTOMER_PRODUCT_LICENSE CPL
       SET AVAILABLE = 0
     WHERE ORDER_INDEX = V_CUR_EXPIRED_PO_INFO(I).ORDER_INDEX;
  
  END LOOP; -- OUTER LOOP I

  COMMIT;
END SP_LAS_LM_PO_EXPIRY_UPDATE;
/
