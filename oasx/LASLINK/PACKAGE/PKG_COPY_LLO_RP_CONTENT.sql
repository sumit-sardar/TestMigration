CREATE OR REPLACE PACKAGE PKG_COPY_LLO_RP_CONTENT IS

  PROCEDURE CREATE_FRAMEWORK_PRODUCT;

  PROCEDURE CREATE_ITEM_SET_SCHEDULABLE(IN_OLD_PRODUCT_ID INTEGER,
                                        IN_NEW_PRODUCT_ID INTEGER);

  PROCEDURE CREATE_TEST_CATALOG(IN_OLD_PRODUCT_ID INTEGER,
                                IN_NEW_PRODUCT_ID INTEGER);

  PROCEDURE INSERT_ITEM_SET_RELATION(IN_OLD_ITEM_SET_ID INTEGER,
                                     IN_ITEM_LEVEL      VARCHAR2);

  PROCEDURE INSERT_ITEM(IN_OLD_ITEM_SET_ID INTEGER);

  PROCEDURE CREATE_ITEM_RUBRIC_DATA(OLD_ITEM_ID VARCHAR2,
                                    NEW_ITEM_ID VARCHAR2);

  PROCEDURE CREATE_ITEM_RUBRIC_EXEMPLARS(OLD_ITEM_ID VARCHAR2,
                                         NEW_ITEM_ID VARCHAR2);

  PROCEDURE CREATE_DATAPOINT_AND_CONDITION;

  PROCEDURE INSERT_ITEM_SET_ITEM(TD_ITEM_SET_ID INTEGER);

  PROCEDURE CREATE_ITEM_SET_CATEGORY(IN_OLD_FF_PRODUCT_ID INTEGER,
                                     IN_NEW_FF_PRODUCT_ID INTEGER);

  PROCEDURE CREATE_RE_ITEM_SET(OLD_PRODUCT_ID INTEGER,
                               NEW_PRODUCT_ID INTEGER);

  PROCEDURE CREATE_CHILD_RE_ENTRIES(V_OLD_ITEM_SET_ID INTEGER,
                                    V_NEW_ITEM_SET_ID INTEGER,
                                    OLD_PRODUCT_ID    INTEGER,
                                    NEW_PRODUCT_ID    INTEGER);

  PROCEDURE INSERT_RE_ITEM_SETS(IN_OLD_ITEM_SET_ID       INTEGER,
                                V_NEW_PARENT_ITEM_SET_ID INTEGER,
                                OLD_PRODUCT_ID           INTEGER,
                                NEW_PRODUCT_ID           INTEGER);

  PROCEDURE CREATE_PRODUCT_TESTDATA(IN_OLD_FF_PRODUCT_ID INTEGER,
                                    IN_NEW_FF_PRODUCT_ID INTEGER);

  PROCEDURE CREATE_ITEM_SET_PRODUCT(OLD_PRODUCT_ID INTEGER,
                                    NEW_PRODUCT_ID INTEGER);

  PROCEDURE CREATE_ITEM_SET_ITEM_RE;

  PROCEDURE CLEANUP_LOOKUP_TABLE;

  PROCEDURE CREATE_FF_PRODUCT_PARENT;

  PROCEDURE COPY_LLO_RP_CONTENT_DATA;

END PKG_COPY_LLO_RP_CONTENT;
/
CREATE OR REPLACE PACKAGE BODY PKG_COPY_LLO_RP_CONTENT AS

  V_1ST_EDITION_PRODUCT   CONSTANT INTEGER := 7000;
  V_2ND_EDITION_PRODUCT   CONSTANT INTEGER := 7500;
  NEW_1ST_EDITION_PRODUCT CONSTANT INTEGER := 7200;
  NEW_2ND_EDITION_PRODUCT CONSTANT INTEGER := 7800;
  NEW_FF_PARENT_ID        CONSTANT INTEGER := 72000;

  --EXISTING TESTS
  V_LL_FORM_A   CONSTANT INTEGER := 7001;
  V_LL_FORM_B   CONSTANT INTEGER := 7002;
  V_LL_FORM_ESP CONSTANT INTEGER := 7003;

  V_LL_FORM_C       CONSTANT INTEGER := 7501;
  V_LL_FORM_ESPB    CONSTANT INTEGER := 7502;
  V_LL_FORM_PRC_CD  CONSTANT INTEGER := 7503;
  V_LL_FORM_PRC_ESP CONSTANT INTEGER := 7504;
  V_LL_FORM_D       CONSTANT INTEGER := 7505;

  -- NEW SET OF PRODUCTS
  V_LL_FORM_A_BMT   CONSTANT INTEGER := 7201;
  V_LL_FORM_B_BMT   CONSTANT INTEGER := 7202;
  V_LL_FORM_ESP_BMT CONSTANT INTEGER := 7203;

  V_LL_FORM_C_BMT       CONSTANT INTEGER := 7801;
  V_LL_FORM_ESPB_BMT    CONSTANT INTEGER := 7802;
  V_LL_FORM_PRC_CD_BMT  CONSTANT INTEGER := 7803;
  V_LL_FORM_PRC_ESP_BMT CONSTANT INTEGER := 7804;
  V_LL_FORM_D_BMT       CONSTANT INTEGER := 7805;
  V_ITEM_ID_EXTENSION   CONSTANT VARCHAR2(10) := '.BMT';

  CURSOR CUR_GET_PRODUCTS(IN_PRODUCT_ID INTEGER) IS
    SELECT PRODUCT_ID FROM PRODUCT WHERE PARENT_PRODUCT_ID = IN_PRODUCT_ID;

  CURSOR CUR_TC_ITEM_SET(IN_PRODUCT_ID INTEGER) IS
    SELECT ITEM_SET_ID FROM TEST_CATALOG WHERE PRODUCT_ID = IN_PRODUCT_ID;

  CURSOR CUR_CHILD_ITEM_SET_TS(IN_PARENT_ITEM_SET_ID INTEGER) IS
    SELECT ITEM_SET_ID
      FROM ITEM_SET_PARENT
     WHERE PARENT_ITEM_SET_ID = IN_PARENT_ITEM_SET_ID;

  CURSOR CUR_CHILD_ITEM_SET_TD(IN_PARENT_ITEM_SET_ID INTEGER) IS
    SELECT ITEM_SET_ID
      FROM ITEM_SET_PARENT
     WHERE PARENT_ITEM_SET_ID = IN_PARENT_ITEM_SET_ID;

  CURSOR CUR_GET_ITEM_LIST(IN_ITEM_SET INTEGER) IS
    SELECT ISI.ITEM_ID AS ITEM_ID
      FROM ITEM_SET_ITEM ISI
     WHERE ISI.ITEM_SET_ID = IN_ITEM_SET;

  CURSOR CUR_GET_ITEM_SET_ITEM_ENTRIES(IN_ITEM_SET_ID INTEGER) IS
    SELECT ISI.ITEM_ID AS OLD_ITEM_ID,
           LIS.NEW_ID  AS NEW_ITEM_SET_ID,
           LI.NEW_ID   AS NEW_ITEM_ID
      FROM ITEM_SET_ITEM          ISI,
           LLO_RP_LOOKUP_ITEM_SET LIS,
           LLO_RP_LOOKUP_ITEM     LI
     WHERE ISI.ITEM_SET_ID = IN_ITEM_SET_ID
       AND ISI.ITEM_SET_ID = LIS.OLD_ID
       AND ISI.ITEM_ID = LI.OLD_ID;

  CURSOR CUR_TEST_CATALOG_ENTRIES(IN_PRODUCT_ID INTEGER) IS
    SELECT TC.TEST_CATALOG_ID AS TEST_CATALOG_ID,
           TC.ITEM_SET_ID     AS OLD_TC_ID,
           LIS.NEW_ID         AS NEW_TC_ID
      FROM TEST_CATALOG TC, LLO_RP_LOOKUP_ITEM_SET LIS
     WHERE TC.PRODUCT_ID = IN_PRODUCT_ID
       AND TC.ITEM_SET_ID = LIS.OLD_ID;

  CURSOR CUR_ITEM_SET_PRODUCT(OLD_PRODUCT_ID INTEGER, NEW_PRODUCT_ID INTEGER) IS
    SELECT LIS.NEW_ID     AS ITEM_SET_ID,
           ISP.CREATED_BY AS CREATED_BY,
           ISP.UPDATED_BY AS UPDATED_BY
      FROM ITEM_SET_PRODUCT ISP, LLO_RP_LOOKUP_ITEM_SET LIS
     WHERE ISP.ITEM_SET_ID = LIS.OLD_ID
       AND ISP.PRODUCT_ID = OLD_PRODUCT_ID;

  CURSOR CUR_ITEM_SET_PRODUCT_RE(OLD_PRODUCT_ID INTEGER, NEW_PRODUCT_ID INTEGER) IS
    SELECT LIS.NEW_ID     AS ITEM_SET_ID,
           ISP.CREATED_BY AS CREATED_BY,
           ISP.UPDATED_BY AS UPDATED_BY
      FROM ITEM_SET_PRODUCT ISP, LLO_RP_LOOKUP_ITEM_SET_RE LIS
     WHERE ISP.ITEM_SET_ID = LIS.OLD_ID
       AND ISP.PRODUCT_ID = OLD_PRODUCT_ID;

  -- DATA FOR ALL RE AND ITEM-ID RELATION
  CURSOR CUR_ALL_RE_DATA IS
    SELECT LISR.NEW_ID         AS ITEM_SET_ID,
           ISI.ITEM_SORT_ORDER AS ITEM_SORT_ORDER,
           LI.NEW_ID           AS ITEM_ID,
           ISI.IBS_INVISIBLE   AS IBS_INVISIBLE,
           ISI.FIELD_TEST      AS FIELD_TEST,
           ISI.SUPPRESSED      AS SUPPRESSED
      FROM LLO_RP_LOOKUP_ITEM_SET_RE LISR,
           ITEM_SET_ITEM             ISI,
           LLO_RP_LOOKUP_ITEM        LI
     WHERE LISR.OLD_ID = ISI.ITEM_SET_ID
       AND LI.OLD_ID = ISI.ITEM_ID;

  /* TYPE ARR_ITEM_SET_RE IS TABLE OF CUR_CHILD_ITEM_SET%ROWTYPE;
  V_CUR_CHILD_ITEM_SET ARR_ITEM_SET_RE;*/

  /**
  * Creates framework product.
  */
  PROCEDURE CREATE_FRAMEWORK_PRODUCT AS
  
    V_FF_PRODUCT_ID     INTEGER := 0;
    V_NEW_FF_PRODUCT_ID INTEGER := 0;
  
  BEGIN
  
    -- INSERT INTO PRODUCT_TYPE_CODE
    INSERT INTO PRODUCT_TYPE_CODE
      (PRODUCT_TYPE, PRODUCT_TYPE_DESC)
    VALUES
      ('LLBMT', 'LasLink BMT');
  
    INSERT INTO PRODUCT_TYPE_CODE
      (PRODUCT_TYPE, PRODUCT_TYPE_DESC)
    VALUES
      ('STBMT', 'Standard BMT');
  
    /** This will be creating the framework products for laslink Rp
    */
    FOR I IN 1 .. 2 LOOP
    
      IF I = 1 THEN
        V_FF_PRODUCT_ID     := V_1ST_EDITION_PRODUCT;
        V_NEW_FF_PRODUCT_ID := NEW_1ST_EDITION_PRODUCT;
      ELSE
        V_FF_PRODUCT_ID     := V_2ND_EDITION_PRODUCT;
        V_NEW_FF_PRODUCT_ID := NEW_2ND_EDITION_PRODUCT;
      END IF;
    
      -- CREATE FRAMEWORK PRODUCTS
      INSERT INTO PRODUCT
        (PRODUCT_ID,
         CREATED_DATE_TIME,
         PRODUCT_DESCRIPTION,
         CREATED_BY,
         VERSION,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ACTIVATION_STATUS,
         PRODUCT_TYPE,
         PRODUCT_NAME,
         SCORING_ITEM_SET_LEVEL,
         PREVIEW_ITEM_SET_LEVEL,
         PARENT_PRODUCT_ID,
         EXT_PRODUCT_ID,
         CONTENT_AREA_LEVEL,
         INTERNAL_DISPLAY_NAME,
         SEC_SCORING_ITEM_SET_LEVEL,
         IBS_SHOW_CMS_ID,
         PRINTABLE,
         SCANNABLE,
         KEYENTERABLE,
         BRANDING_TYPE_CODE,
         EISS_TESTING_PROGRAM,
         ACKNOWLEDGMENTS_URL,
         SHOW_STUDENT_FEEDBACK,
         STATIC_MANIFEST,
         SESSION_MANIFEST,
         SUBTESTS_SELECTABLE,
         SUBTESTS_ORDERABLE,
         SUBTESTS_LEVELS_VARY,
         --  TUTORIAL_RESOURCE,
         OFF_GRADE_TESTING_DISABLED,
         LICENSE_ENABLED,
         SCORABLE)
        (SELECT V_NEW_FF_PRODUCT_ID, --CHANGE
                SYSDATE,
                PRODUCT_DESCRIPTION || 'BMT', -- CHANGE
                CREATED_BY,
                VERSION,
                NULL,
                SYSDATE,
                ACTIVATION_STATUS,
                PRODUCT_TYPE,
                PRODUCT_NAME || 'BMT', -- CHANGE
                SCORING_ITEM_SET_LEVEL,
                PREVIEW_ITEM_SET_LEVEL,
                PARENT_PRODUCT_ID, --NULL
                EXT_PRODUCT_ID,
                CONTENT_AREA_LEVEL,
                INTERNAL_DISPLAY_NAME || 'BMT', --CHANGE
                SEC_SCORING_ITEM_SET_LEVEL,
                IBS_SHOW_CMS_ID,
                PRINTABLE,
                SCANNABLE,
                KEYENTERABLE,
                BRANDING_TYPE_CODE,
                EISS_TESTING_PROGRAM,
                ACKNOWLEDGMENTS_URL,
                SHOW_STUDENT_FEEDBACK,
                STATIC_MANIFEST,
                SESSION_MANIFEST,
                SUBTESTS_SELECTABLE,
                SUBTESTS_ORDERABLE,
                SUBTESTS_LEVELS_VARY,
                --TUTORIAL_RESOURCE,
                OFF_GRADE_TESTING_DISABLED,
                LICENSE_ENABLED,
                SCORABLE
           FROM PRODUCT
          WHERE PRODUCT_ID = V_FF_PRODUCT_ID);
    
      -- CRAETE ITEM_SET_CATEGORY FOR EACH FRAMEWORK
      CREATE_ITEM_SET_CATEGORY(V_FF_PRODUCT_ID, V_NEW_FF_PRODUCT_ID);
    
      -- CREATE RE LEVEL ITEM-SET ENTRIES.
      CREATE_RE_ITEM_SET(V_FF_PRODUCT_ID, V_NEW_FF_PRODUCT_ID);
    
      -- INSERT ALL PRODUCTS FOR THE PARENT PRODUCT.ALSO SCHEDULABLE UNITS ARE INSERTED.
      CREATE_PRODUCT_TESTDATA(V_FF_PRODUCT_ID, V_NEW_FF_PRODUCT_ID);
    
      -- INSERT ALL ITEM SET PRODUCT FOR FRAMEWORK PRODUCTS
      CREATE_ITEM_SET_PRODUCT(V_FF_PRODUCT_ID, V_NEW_FF_PRODUCT_ID);
    
    END LOOP; -- LOOP FOR PARENT PRODUCT
  
    --INSERT INTO ITEM_SET_ITEM  for all re
    CREATE_ITEM_SET_ITEM_RE();
  
    -- CREATE DATAPOINT AND DATAPOINT_CONDITION_CODE  ENTRIES for all item-sets
    CREATE_DATAPOINT_AND_CONDITION();
  
  END CREATE_FRAMEWORK_PRODUCT;

  /**
  * CREATE TC ,TS ,TD ITEM SET RELATIONS.
  */
  PROCEDURE CREATE_ITEM_SET_SCHEDULABLE(IN_OLD_PRODUCT_ID INTEGER,
                                        IN_NEW_PRODUCT_ID INTEGER) AS
  BEGIN
  
    FOR TC_DATA IN CUR_TC_ITEM_SET(IN_OLD_PRODUCT_ID) LOOP
      -- TC LEVEL ENTRIES
      INSERT_ITEM_SET_RELATION(TC_DATA.ITEM_SET_ID, 'TC');
    
      FOR TS_DATA IN CUR_CHILD_ITEM_SET_TS(TC_DATA.ITEM_SET_ID) LOOP
        -- TS LEVEL ENTRIES
        INSERT_ITEM_SET_RELATION(TS_DATA.ITEM_SET_ID, 'TS');
      
        FOR TD_DATA IN CUR_CHILD_ITEM_SET_TD(TS_DATA.ITEM_SET_ID) LOOP
          --TD LEVEL ENTRIES
          INSERT_ITEM_SET_RELATION(TD_DATA.ITEM_SET_ID, 'TD');
        
          -- ITEM TABLE INSERTION
          INSERT_ITEM(TD_DATA.ITEM_SET_ID);
        
          -- ITEM_SET_ITEM TABLE INSERTION
          INSERT_ITEM_SET_ITEM(TD_DATA.ITEM_SET_ID);
        
        END LOOP; --TD LEVEL ENTRIES
      END LOOP; -- TS LEVEL ENTRIES
    END LOOP; -- TC LEVEL ENTRIES
  
  END CREATE_ITEM_SET_SCHEDULABLE;

  /**
  * INSERTS ITEM RELATED TO EACH TD
  */
  PROCEDURE INSERT_ITEM(IN_OLD_ITEM_SET_ID INTEGER) AS
  
    V_NEW_ITEM_ID VARCHAR2(50) := NULL;
    V_COUNT       INTEGER := 0;
  
  BEGIN
  
    -- GET ALL ITEMS FOR TD LEVEL ITEM SET IDS
    FOR ITEM_DATA IN CUR_GET_ITEM_LIST(IN_OLD_ITEM_SET_ID) LOOP
    
      V_NEW_ITEM_ID := ITEM_DATA.ITEM_ID || V_ITEM_ID_EXTENSION;
    
      SELECT COUNT(1) INTO V_COUNT FROM ITEM WHERE ITEM_ID = V_NEW_ITEM_ID;
    
      IF V_COUNT = 0 THEN
        -- ITEM ALREADY NOT PRESENT.
      
        INSERT INTO ITEM
          (ITEM_ID,
           CORRECT_ANSWER,
           ITEM_TYPE,
           CREATED_BY,
           CREATED_DATE_TIME,
           UPDATED_BY,
           UPDATED_DATE_TIME,
           ACTIVATION_STATUS,
           DESCRIPTION,
           NAME,
           EXT_STIMULUS_ID,
           EXT_STIMULUS_TITLE,
           VERSION,
           ITEM_DISPLAY_NAME,
           TEMPLATE_ID,
           THINK_CODE,
           ONLINE_CR,
           PUBLISHED,
           LOCKED,
           IS_VALID,
           CUSTOMER_CREATED,
           CUSTOMER_ID,
           EXTERNAL_ID,
           EXTERNAL_SYSTEM,
           ANSWER_AREA,
           GRIDDED_COLUMNS,
           ADS_ITEM_ID)
          (SELECT V_NEW_ITEM_ID, -- ITEM ID CREATED WITH '.BMT' EXTENSION
                  CORRECT_ANSWER,
                  ITEM_TYPE,
                  CREATED_BY,
                  SYSDATE,
                  UPDATED_BY,
                  SYSDATE,
                  ACTIVATION_STATUS,
                  DESCRIPTION,
                  NAME,
                  EXT_STIMULUS_ID,
                  EXT_STIMULUS_TITLE,
                  VERSION,
                  ITEM_DISPLAY_NAME || V_ITEM_ID_EXTENSION, -- ITEM NAME CREATED WITH '.BMT' EXTENSION
                  TEMPLATE_ID,
                  THINK_CODE,
                  ONLINE_CR,
                  PUBLISHED,
                  LOCKED,
                  IS_VALID,
                  CUSTOMER_CREATED,
                  CUSTOMER_ID,
                  EXTERNAL_ID,
                  EXTERNAL_SYSTEM,
                  ANSWER_AREA,
                  GRIDDED_COLUMNS,
                  ADS_ITEM_ID
             FROM ITEM
            WHERE ITEM_ID = ITEM_DATA.ITEM_ID);
      
        -- THIS IS FOR LOOKUP DATA ENTRIES
        INSERT INTO LLO_RP_LOOKUP_ITEM
          (OLD_ID, NEW_ID)
        VALUES
          (ITEM_DATA.ITEM_ID, V_NEW_ITEM_ID);
      
        -- CREATE ITEM_RUBRIC_DATA ENTRIES
        CREATE_ITEM_RUBRIC_DATA(ITEM_DATA.ITEM_ID, V_NEW_ITEM_ID);
      
        -- CREATE ITEM_RUBRIC_DATA ENTRIES
        CREATE_ITEM_RUBRIC_EXEMPLARS(ITEM_DATA.ITEM_ID, V_NEW_ITEM_ID);
      END IF;
    END LOOP;
  
  END INSERT_ITEM;

  /**
  * INSERTS ITEM_RUBRIC_DATA ENTRIES
  */
  PROCEDURE CREATE_ITEM_RUBRIC_DATA(OLD_ITEM_ID VARCHAR2,
                                    NEW_ITEM_ID VARCHAR2) AS
  
  BEGIN
  
    INSERT INTO ITEM_RUBRIC_DATA
      (ITEM_ID, SCORE, RUBRIC_DESCRIPTION)
      (SELECT NEW_ITEM_ID, SCORE, RUBRIC_DESCRIPTION
         FROM ITEM_RUBRIC_DATA
        WHERE ITEM_ID = OLD_ITEM_ID);
  
  END CREATE_ITEM_RUBRIC_DATA;

  /**
  * CREATES ITEM_RUBRIC_EXEMPLARS ENTRIES.
  */
  PROCEDURE CREATE_ITEM_RUBRIC_EXEMPLARS(OLD_ITEM_ID VARCHAR2,
                                         NEW_ITEM_ID VARCHAR2) AS
  
  BEGIN
  
    INSERT INTO ITEM_RUBRIC_EXEMPLARS
      (ITEM_ID, SCORE, SAMPLE_RESPONSE, RUBRIC_EXPLANATION)
      (SELECT NEW_ITEM_ID, SCORE, SAMPLE_RESPONSE, RUBRIC_EXPLANATION
         FROM ITEM_RUBRIC_EXEMPLARS
        WHERE ITEM_ID = OLD_ITEM_ID);
  
  END CREATE_ITEM_RUBRIC_EXEMPLARS;

  /**
  * CREATES DATAPOINT ENTRIES.
  */
  PROCEDURE CREATE_DATAPOINT_AND_CONDITION AS
  
    NEW_DATAPOINT_ID INTEGER := 0;
  
    CURSOR CUR_ALL_ITEM_SETS IS
      SELECT LISR.OLD_ID AS OLD_ITEM_SET_ID,
             LISR.NEW_ID AS NEW_ITEM_SET_ID,
             LI.OLD_ID   AS OLD_ITEM_ID,
             LI.NEW_ID   AS NEW_ITEM_ID
        FROM LLO_RP_LOOKUP_ITEM_SET_RE LISR,
             LLO_RP_LOOKUP_ITEM        LI,
             DATAPOINT                 D
       WHERE LISR.OLD_ID = D.ITEM_SET_ID
         AND LI.OLD_ID = D.ITEM_ID
      UNION
      SELECT LIS.OLD_ID AS OLD_ITEM_SET_ID,
             LIS.NEW_ID AS NEW_ITEM_SET_ID,
             LI.OLD_ID  AS OLD_ITEM_ID,
             LI.NEW_ID  AS NEW_ITEM_ID
        FROM LLO_RP_LOOKUP_ITEM_SET LIS, LLO_RP_LOOKUP_ITEM LI, DATAPOINT D
       WHERE LIS.OLD_ID = D.ITEM_SET_ID
         AND LI.OLD_ID = D.ITEM_ID;
  
  BEGIN
  
    FOR CUR_DATA IN CUR_ALL_ITEM_SETS LOOP
    
      SELECT SEQ_DATAPOINT_ID.NEXTVAL INTO NEW_DATAPOINT_ID FROM DUAL;
    
      -- INSERT INTO DATAPOINT
      INSERT INTO DATAPOINT
        (DATAPOINT_ID,
         ITEM_ID,
         ITEM_SET_ID,
         MIN_POINTS,
         MAX_POINTS,
         CREATED_BY,
         CREATED_DATE_TIME,
         UPDATED_BY,
         UPDATED_DATE_TIME)
        (select NEW_DATAPOINT_ID,
                CUR_DATA.NEW_ITEM_ID, -- NEW ITEM ID
                CUR_DATA.NEW_ITEM_SET_ID, -- NEW ITEM SET ID
                MIN_POINTS,
                MAX_POINTS,
                CREATED_BY,
                SYSDATE,
                UPDATED_BY,
                SYSDATE
           FROM DATAPOINT
          WHERE ITEM_ID = CUR_DATA.OLD_ITEM_ID
            AND ITEM_SET_ID = CUR_DATA.OLD_ITEM_SET_ID);
    
      -- INSERT INTO DATAPOINT CONDITION CODE
      INSERT INTO DATAPOINT_CONDITION_CODE
        (DATAPOINT_ID, CONDITION_CODE_ID)
        (SELECT NEW_DATAPOINT_ID, CONDITION_CODE_ID
           FROM DATAPOINT_CONDITION_CODE
          WHERE DATAPOINT_ID =
                (SELECT DATAPOINT_ID
                   FROM DATAPOINT
                  WHERE ITEM_ID = CUR_DATA.OLD_ITEM_ID
                    AND ITEM_SET_ID = CUR_DATA.OLD_ITEM_SET_ID));
    
    END LOOP;
  
  END CREATE_DATAPOINT_AND_CONDITION;

  /**
  *  CREATES ITEM_SET ENTRIES AND ITEM_SET PARENT CHILD RELATIONS
  **/
  PROCEDURE INSERT_ITEM_SET_RELATION(IN_OLD_ITEM_SET_ID INTEGER,
                                     IN_ITEM_LEVEL      VARCHAR2) AS
  
    V_NEW_ITEM_SET_ID    INTEGER := 0;
    V_PARENT_ITEM_SET_ID INTEGER := 0;
  
  BEGIN
  
    SELECT SEQ_ITEM_SET_ID.NEXTVAL INTO V_NEW_ITEM_SET_ID FROM DUAL;
  
    INSERT INTO ITEM_SET
      (ITEM_SET_ID,
       ITEM_SET_TYPE,
       ITEM_SET_NAME,
       MIN_GRADE,
       VERSION,
       MAX_GRADE,
       ITEM_SET_LEVEL,
       SUBJECT,
       GRADE,
       SAMPLE,
       MEDIA_PATH,
       TIME_LIMIT,
       BREAK_TIME,
       EXT_EMS_ITEM_SET_ID,
       EXT_CMS_ITEM_SET_ID,
       ITEM_SET_DISPLAY_NAME,
       ITEM_SET_DESCRIPTION,
       ITEM_SET_RULE_ID,
       CREATED_DATE_TIME,
       CREATED_BY,
       ACTIVATION_STATUS,
       ITEM_SET_CATEGORY_ID,
       OWNER_CUSTOMER_ID,
       UPDATED_BY,
       UPDATED_DATE_TIME,
       ITEM_SET_FORM,
       PUBLISH_STATUS,
       ORIGINAL_CREATED_BY,
       EXT_TST_ITEM_SET_ID,
       CONTENT_SIZE,
       ADS_OB_ASMT_ID,
       ASMT_HASH,
       ASMT_ENCRYPTION_KEY,
       ITEM_ENCRYPTION_KEY,
       FORWARD_ONLY,
       ADAPTIVE,
       CONTENT_REPOSITORY_URI)
      (SELECT V_NEW_ITEM_SET_ID, -- NEW ITEM SET
              ITEM_SET_TYPE,
              ITEM_SET_NAME,
              MIN_GRADE,
              VERSION,
              MAX_GRADE,
              ITEM_SET_LEVEL,
              SUBJECT,
              GRADE,
              SAMPLE,
              MEDIA_PATH,
              TIME_LIMIT,
              BREAK_TIME,
              EXT_EMS_ITEM_SET_ID,
              EXT_CMS_ITEM_SET_ID,
              ITEM_SET_DISPLAY_NAME,
              ITEM_SET_DESCRIPTION,
              ITEM_SET_RULE_ID,
              SYSDATE,
              CREATED_BY,
              ACTIVATION_STATUS,
              ITEM_SET_CATEGORY_ID, -- THIS IS NOT NEEDED TO BE CHANGED AS FOR TC,TS & TD IT REMAINS NULL
              OWNER_CUSTOMER_ID,
              UPDATED_BY,
              SYSDATE,
              ITEM_SET_FORM,
              PUBLISH_STATUS,
              ORIGINAL_CREATED_BY,
              EXT_TST_ITEM_SET_ID,
              CONTENT_SIZE,
              ADS_OB_ASMT_ID,
              ASMT_HASH,
              ASMT_ENCRYPTION_KEY,
              ITEM_ENCRYPTION_KEY,
              FORWARD_ONLY,
              ADAPTIVE,
              CONTENT_REPOSITORY_URI
         FROM ITEM_SET
        WHERE ITEM_SET_ID = IN_OLD_ITEM_SET_ID);
  
    -- THIS IS FOR LOOKUP DATA ENTRIES
    INSERT INTO LLO_RP_LOOKUP_ITEM_SET
      (OLD_ID, NEW_ID)
    VALUES
      (IN_OLD_ITEM_SET_ID, V_NEW_ITEM_SET_ID);
  
    -- THIS IS FOR ITEM_SET_PARENT ENTRIES. TC LEVEL DOENOT REQUIRE ANY ENTRIES
    IF IN_ITEM_LEVEL <> 'TC' THEN
    
      SELECT RP.NEW_ID
        INTO V_PARENT_ITEM_SET_ID
        FROM LLO_RP_LOOKUP_ITEM_SET RP, ITEM_SET_PARENT ISP
       WHERE ISP.ITEM_SET_ID = IN_OLD_ITEM_SET_ID
         AND RP.OLD_ID = ISP.PARENT_ITEM_SET_ID;
    
      INSERT INTO ITEM_SET_PARENT
        (PARENT_ITEM_SET_ID,
         CREATED_DATE_TIME,
         ITEM_SET_TYPE,
         ITEM_SET_ID,
         CREATED_BY,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ITEM_SET_SORT_ORDER,
         PARENT_ITEM_SET_TYPE,
         ITEM_SET_GROUP)
        (SELECT V_PARENT_ITEM_SET_ID, -- NEW PARENT ITEMSET ID
                SYSDATE,
                ITEM_SET_TYPE,
                V_NEW_ITEM_SET_ID, -- NEW ITEM SET ID
                CREATED_BY,
                UPDATED_BY,
                SYSDATE,
                ITEM_SET_SORT_ORDER,
                PARENT_ITEM_SET_TYPE,
                ITEM_SET_GROUP
           FROM ITEM_SET_PARENT
          WHERE ITEM_SET_ID = IN_OLD_ITEM_SET_ID);
    
    END IF;
  
  END INSERT_ITEM_SET_RELATION;

  /**
  * THIS WILL CREATE ITEM_SET_ITEM ENTRIES
  */
  PROCEDURE INSERT_ITEM_SET_ITEM(TD_ITEM_SET_ID INTEGER) AS
  
  BEGIN
  
    -- INSERT FOR ALL ITEMS FOR THE TD LEVEL ITEM-SET
    FOR CUR_DATA IN CUR_GET_ITEM_SET_ITEM_ENTRIES(TD_ITEM_SET_ID) LOOP
    
      INSERT INTO ITEM_SET_ITEM
        (ITEM_SET_ID,
         CREATED_DATE_TIME,
         ITEM_SORT_ORDER,
         CREATED_BY,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ITEM_ID,
         IBS_INVISIBLE,
         FIELD_TEST,
         SUPPRESSED)
        (SELECT CUR_DATA.NEW_ITEM_SET_ID, -- NEW ITEM_SET_ID
                SYSDATE,
                ITEM_SORT_ORDER,
                CREATED_BY,
                UPDATED_BY,
                SYSDATE,
                CUR_DATA.NEW_ITEM_ID, -- NEW ITEM_ID
                IBS_INVISIBLE,
                FIELD_TEST,
                SUPPRESSED
           FROM ITEM_SET_ITEM
          WHERE ITEM_SET_ID = TD_ITEM_SET_ID
            AND ITEM_ID = CUR_DATA.OLD_ITEM_ID);
    
    END LOOP;
  
  END INSERT_ITEM_SET_ITEM;

  /**
  * INSERTS TEST CATALOG ENTRIES FOR EACH PRODUCT
  */
  PROCEDURE CREATE_TEST_CATALOG(IN_OLD_PRODUCT_ID INTEGER,
                                IN_NEW_PRODUCT_ID INTEGER) AS
  
  BEGIN
  
    -- LOOP FOR ALL TEST CATALOGS PRESENT FOR THE PRODUCT
    FOR CUR_DATA IN CUR_TEST_CATALOG_ENTRIES(IN_OLD_PRODUCT_ID) LOOP
    
      INSERT INTO TEST_CATALOG
        (TEST_CATALOG_ID,
         PRODUCT_ID,
         TEST_NAME,
         TEST_DISPLAY_NAME,
         ITEM_SET_ID,
         EXT_CATALOG_ID,
         SUBJECT,
         TEST_GRADE,
         TEST_FORM,
         CREATED_DATE_TIME,
         TEST_LEVEL,
         VERSION,
         CREATED_BY,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ACTIVATION_STATUS,
         COMMODITY_CODE,
         EISS_TEST_LEVEL,
         BLOCK_DOWNLOAD_FLAG)
        (SELECT SEQ_TEST_CATALOG_ID.NEXTVAL, -- SEQUENCE
                IN_NEW_PRODUCT_ID, -- NEW PRODUCT-ID
                TEST_NAME,
                TEST_DISPLAY_NAME,
                CUR_DATA.NEW_TC_ID, -- NEW TC LEVEL ITEM SET ID
                EXT_CATALOG_ID,
                SUBJECT,
                TEST_GRADE,
                TEST_FORM,
                SYSDATE,
                TEST_LEVEL,
                VERSION,
                CREATED_BY,
                UPDATED_BY,
                SYSDATE,
                ACTIVATION_STATUS,
                COMMODITY_CODE,
                EISS_TEST_LEVEL,
                BLOCK_DOWNLOAD_FLAG
           FROM TEST_CATALOG
          WHERE TEST_CATALOG_ID = CUR_DATA.TEST_CATALOG_ID);
    
    END LOOP;
  
  END CREATE_TEST_CATALOG;

  /**
  * CREATE RE LEVEL ITEM SET ENTRIES.
  **/
  PROCEDURE CREATE_RE_ITEM_SET(OLD_PRODUCT_ID INTEGER,
                               NEW_PRODUCT_ID INTEGER) AS
  
    V_OLD_CATEGORY_ID INTEGER := 0;
    V_NEW_CATEGORY_ID INTEGER := 0;
    V_NEW_ITEM_SET_ID INTEGER := 0;
    V_OLD_ITEM_SET_ID INTEGER := 0;
  
    -- TOP LEVEL RE ITEM SETS
    CURSOR CUR_TOP_RE_ITEMSETS(IN_CATEGORY_ID INTEGER) IS
      SELECT ITEM_SET_ID
        FROM ITEM_SET
       WHERE ITEM_SET_CATEGORY_ID = IN_CATEGORY_ID;
  
  BEGIN
  
    SELECT ISC.ITEM_SET_CATEGORY_ID, ISC_NEW.ITEM_SET_CATEGORY_ID
      INTO V_OLD_CATEGORY_ID, V_NEW_CATEGORY_ID
      FROM ITEM_SET_CATEGORY ISC, ITEM_SET_CATEGORY ISC_NEW
     WHERE ISC.FRAMEWORK_PRODUCT_ID = OLD_PRODUCT_ID
       AND ISC_NEW.FRAMEWORK_PRODUCT_ID = NEW_PRODUCT_ID
       AND ISC_NEW.ITEM_SET_CATEGORY_LEVEL = ISC.ITEM_SET_CATEGORY_LEVEL
       AND ISC_NEW.ITEM_SET_CATEGORY_LEVEL = 1
       AND ISC.ITEM_SET_CATEGORY_LEVEL = 1;
  
    FOR CUR_DATA IN CUR_TOP_RE_ITEMSETS(V_OLD_CATEGORY_ID) LOOP
    
      -- SEQUENCE GENERATION
      SELECT SEQ_ITEM_SET_ID.NEXTVAL INTO V_NEW_ITEM_SET_ID FROM DUAL;
    
      V_OLD_ITEM_SET_ID := CUR_DATA.ITEM_SET_ID;
    
      INSERT INTO ITEM_SET
        (ITEM_SET_ID,
         ITEM_SET_TYPE,
         ITEM_SET_NAME,
         MIN_GRADE,
         VERSION,
         MAX_GRADE,
         ITEM_SET_LEVEL,
         SUBJECT,
         GRADE,
         SAMPLE,
         MEDIA_PATH,
         TIME_LIMIT,
         BREAK_TIME,
         EXT_EMS_ITEM_SET_ID,
         EXT_CMS_ITEM_SET_ID,
         ITEM_SET_DISPLAY_NAME,
         ITEM_SET_DESCRIPTION,
         ITEM_SET_RULE_ID,
         CREATED_DATE_TIME,
         CREATED_BY,
         ACTIVATION_STATUS,
         ITEM_SET_CATEGORY_ID,
         OWNER_CUSTOMER_ID,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ITEM_SET_FORM,
         PUBLISH_STATUS,
         ORIGINAL_CREATED_BY,
         EXT_TST_ITEM_SET_ID,
         CONTENT_SIZE,
         ADS_OB_ASMT_ID,
         ASMT_HASH,
         ASMT_ENCRYPTION_KEY,
         ITEM_ENCRYPTION_KEY,
         FORWARD_ONLY,
         ADAPTIVE,
         CONTENT_REPOSITORY_URI)
        (SELECT V_NEW_ITEM_SET_ID, -- NEW ITEM SET
                ITEM_SET_TYPE,
                ITEM_SET_NAME,
                MIN_GRADE,
                VERSION,
                MAX_GRADE,
                ITEM_SET_LEVEL,
                SUBJECT,
                GRADE,
                SAMPLE,
                MEDIA_PATH,
                TIME_LIMIT,
                BREAK_TIME,
                EXT_EMS_ITEM_SET_ID,
                EXT_CMS_ITEM_SET_ID,
                ITEM_SET_DISPLAY_NAME,
                ITEM_SET_DESCRIPTION,
                ITEM_SET_RULE_ID,
                SYSDATE,
                CREATED_BY,
                ACTIVATION_STATUS,
                V_NEW_CATEGORY_ID, -- THIS IS CHANGED. NEW CATEGORY ID
                OWNER_CUSTOMER_ID,
                UPDATED_BY,
                SYSDATE,
                ITEM_SET_FORM,
                PUBLISH_STATUS,
                ORIGINAL_CREATED_BY,
                EXT_TST_ITEM_SET_ID,
                CONTENT_SIZE,
                ADS_OB_ASMT_ID,
                ASMT_HASH,
                ASMT_ENCRYPTION_KEY,
                ITEM_ENCRYPTION_KEY,
                FORWARD_ONLY,
                ADAPTIVE,
                CONTENT_REPOSITORY_URI
           FROM ITEM_SET
          WHERE ITEM_SET_ID = V_OLD_ITEM_SET_ID);
    
      --THIS IS FOR LOOKUP DATA ENTRIES
      INSERT INTO LLO_RP_LOOKUP_ITEM_SET_RE
        (OLD_ID, NEW_ID)
      VALUES
        (V_OLD_ITEM_SET_ID, V_NEW_ITEM_SET_ID);
    
      --POPULATE OTHER CHILD RE LEVEL ITEM SETS
      CREATE_CHILD_RE_ENTRIES(V_OLD_ITEM_SET_ID,
                              V_NEW_ITEM_SET_ID,
                              OLD_PRODUCT_ID,
                              NEW_PRODUCT_ID);
    
    END LOOP;
  
  END CREATE_RE_ITEM_SET;

  /**
  * CREATE RE LEVEL ITEM SET ENRIES FOR LOWER LEVEL CHILD ITEM SETS
  **/
  PROCEDURE CREATE_CHILD_RE_ENTRIES(V_OLD_ITEM_SET_ID INTEGER,
                                    V_NEW_ITEM_SET_ID INTEGER,
                                    OLD_PRODUCT_ID    INTEGER,
                                    NEW_PRODUCT_ID    INTEGER) AS
  
    CURSOR CUR_CHILD_ITEM_SET(IN_PARENT_ITEM_SET_ID INTEGER) IS
      SELECT ITEM_SET_ID
        FROM ITEM_SET_PARENT
       WHERE PARENT_ITEM_SET_ID = IN_PARENT_ITEM_SET_ID;
  
  BEGIN
  
    FOR CUR_DATA IN CUR_CHILD_ITEM_SET(V_OLD_ITEM_SET_ID) LOOP
      INSERT_RE_ITEM_SETS(CUR_DATA.ITEM_SET_ID, -- OLD ITEM SET ID
                          V_NEW_ITEM_SET_ID, -- NEW PARENT ITEM SET ID
                          OLD_PRODUCT_ID, -- OLD FRAMEWORK
                          NEW_PRODUCT_ID); -- NEW FRAMEWORK
    END LOOP;
  END CREATE_CHILD_RE_ENTRIES;

  /**
  *
  */
  PROCEDURE INSERT_RE_ITEM_SETS(IN_OLD_ITEM_SET_ID       INTEGER,
                                V_NEW_PARENT_ITEM_SET_ID INTEGER,
                                OLD_PRODUCT_ID           INTEGER,
                                NEW_PRODUCT_ID           INTEGER) AS
  
    V_NEW_ITEM_SET_ID        INTEGER := 0;
    NEW_ITEM_SET_CATEGORY_ID INTEGER := 0;
  
  BEGIN
  
    -- FETCH NEW_ITEM_SET_CATEGORY_ID
    SELECT ISC_NEW.ITEM_SET_CATEGORY_ID
      INTO NEW_ITEM_SET_CATEGORY_ID
      FROM ITEM_SET_CATEGORY ISC, ITEM_SET_CATEGORY ISC_NEW, ITEM_SET ISET
     WHERE ISET.ITEM_SET_ID = IN_OLD_ITEM_SET_ID
       AND ISET.ITEM_SET_CATEGORY_ID = ISC.ITEM_SET_CATEGORY_ID
       AND ISC.ITEM_SET_CATEGORY_LEVEL = ISC_NEW.ITEM_SET_CATEGORY_LEVEL
       AND ISC_NEW.FRAMEWORK_PRODUCT_ID = NEW_PRODUCT_ID
       AND ISC.FRAMEWORK_PRODUCT_ID = OLD_PRODUCT_ID;
  
    -- SEQUENCE GENERATION
    SELECT SEQ_ITEM_SET_ID.NEXTVAL INTO V_NEW_ITEM_SET_ID FROM DUAL;
  
    INSERT INTO ITEM_SET
      (ITEM_SET_ID,
       ITEM_SET_TYPE,
       ITEM_SET_NAME,
       MIN_GRADE,
       VERSION,
       MAX_GRADE,
       ITEM_SET_LEVEL,
       SUBJECT,
       GRADE,
       SAMPLE,
       MEDIA_PATH,
       TIME_LIMIT,
       BREAK_TIME,
       EXT_EMS_ITEM_SET_ID,
       EXT_CMS_ITEM_SET_ID,
       ITEM_SET_DISPLAY_NAME,
       ITEM_SET_DESCRIPTION,
       ITEM_SET_RULE_ID,
       CREATED_DATE_TIME,
       CREATED_BY,
       ACTIVATION_STATUS,
       ITEM_SET_CATEGORY_ID,
       OWNER_CUSTOMER_ID,
       UPDATED_BY,
       UPDATED_DATE_TIME,
       ITEM_SET_FORM,
       PUBLISH_STATUS,
       ORIGINAL_CREATED_BY,
       EXT_TST_ITEM_SET_ID,
       CONTENT_SIZE,
       ADS_OB_ASMT_ID,
       ASMT_HASH,
       ASMT_ENCRYPTION_KEY,
       ITEM_ENCRYPTION_KEY,
       FORWARD_ONLY,
       ADAPTIVE,
       CONTENT_REPOSITORY_URI)
      (SELECT V_NEW_ITEM_SET_ID, -- NEW ITEM SET
              ITEM_SET_TYPE,
              ITEM_SET_NAME,
              MIN_GRADE,
              VERSION,
              MAX_GRADE,
              ITEM_SET_LEVEL,
              SUBJECT,
              GRADE,
              SAMPLE,
              MEDIA_PATH,
              TIME_LIMIT,
              BREAK_TIME,
              EXT_EMS_ITEM_SET_ID,
              EXT_CMS_ITEM_SET_ID,
              ITEM_SET_DISPLAY_NAME,
              ITEM_SET_DESCRIPTION,
              ITEM_SET_RULE_ID,
              SYSDATE,
              CREATED_BY,
              ACTIVATION_STATUS,
              NEW_ITEM_SET_CATEGORY_ID, -- THIS IS CHANGED. NEW CATEGORY ID
              OWNER_CUSTOMER_ID,
              UPDATED_BY,
              SYSDATE,
              ITEM_SET_FORM,
              PUBLISH_STATUS,
              ORIGINAL_CREATED_BY,
              EXT_TST_ITEM_SET_ID,
              CONTENT_SIZE,
              ADS_OB_ASMT_ID,
              ASMT_HASH,
              ASMT_ENCRYPTION_KEY,
              ITEM_ENCRYPTION_KEY,
              FORWARD_ONLY,
              ADAPTIVE,
              CONTENT_REPOSITORY_URI
         FROM ITEM_SET
        WHERE ITEM_SET_ID = IN_OLD_ITEM_SET_ID);
  
    --THIS IS FOR LOOKUP DATA ENTRIES
    INSERT INTO LLO_RP_LOOKUP_ITEM_SET_RE
      (OLD_ID, NEW_ID)
    VALUES
      (IN_OLD_ITEM_SET_ID, V_NEW_ITEM_SET_ID);
  
    -- THIS IS ITEM_SET_PARENT_ENTRY
    INSERT INTO ITEM_SET_PARENT
      (PARENT_ITEM_SET_ID,
       CREATED_DATE_TIME,
       ITEM_SET_TYPE,
       ITEM_SET_ID,
       CREATED_BY,
       UPDATED_BY,
       UPDATED_DATE_TIME,
       ITEM_SET_SORT_ORDER,
       PARENT_ITEM_SET_TYPE,
       ITEM_SET_GROUP)
      (SELECT V_NEW_PARENT_ITEM_SET_ID, -- NEW PARENT ITEMSET ID
              SYSDATE,
              ITEM_SET_TYPE,
              V_NEW_ITEM_SET_ID, -- NEW ITEM SET ID
              CREATED_BY,
              UPDATED_BY,
              SYSDATE,
              ITEM_SET_SORT_ORDER,
              PARENT_ITEM_SET_TYPE,
              ITEM_SET_GROUP
         FROM ITEM_SET_PARENT
        WHERE ITEM_SET_ID = IN_OLD_ITEM_SET_ID);
  
    -- CALL CREATE_CHILD_RE_ENTRIES TO RE-ENTRY ALL CHILD ITEM SETS IN RECURSIVE MANNER.
    CREATE_CHILD_RE_ENTRIES(IN_OLD_ITEM_SET_ID,
                            V_NEW_ITEM_SET_ID,
                            OLD_PRODUCT_ID,
                            NEW_PRODUCT_ID);
  
  END INSERT_RE_ITEM_SETS;

  /**
  * INSERT ALL ITEM_SET_PRODUCT DATA
  */
  PROCEDURE CREATE_ITEM_SET_PRODUCT(OLD_PRODUCT_ID INTEGER,
                                    NEW_PRODUCT_ID INTEGER) AS
  
  BEGIN
  
    -- ENTER TS/TD/TC DATA
    FOR CUR_DATA IN CUR_ITEM_SET_PRODUCT(OLD_PRODUCT_ID, NEW_PRODUCT_ID) LOOP
      INSERT INTO ITEM_SET_PRODUCT
        (ITEM_SET_ID,
         PRODUCT_ID,
         CREATED_BY,
         CREATED_DATE_TIME,
         UPDATED_BY,
         UPDATED_DATE_TIME)
      VALUES
        (CUR_DATA.ITEM_SET_ID,
         NEW_PRODUCT_ID,
         CUR_DATA.CREATED_BY,
         SYSDATE,
         CUR_DATA.UPDATED_BY,
         SYSDATE);
    END LOOP;
  
    -- ENTER RE DATA
    FOR CUR_DATA IN CUR_ITEM_SET_PRODUCT_RE(OLD_PRODUCT_ID, NEW_PRODUCT_ID) LOOP
      INSERT INTO ITEM_SET_PRODUCT
        (ITEM_SET_ID,
         PRODUCT_ID,
         CREATED_BY,
         CREATED_DATE_TIME,
         UPDATED_BY,
         UPDATED_DATE_TIME)
      VALUES
        (CUR_DATA.ITEM_SET_ID,
         NEW_PRODUCT_ID,
         CUR_DATA.CREATED_BY,
         SYSDATE,
         CUR_DATA.UPDATED_BY,
         SYSDATE);
    END LOOP;
  
  END CREATE_ITEM_SET_PRODUCT;

  /**
  * THIS WILL CREATE ITEM-SET-CATEGORY ENTRIES
  */
  PROCEDURE CREATE_ITEM_SET_CATEGORY(IN_OLD_FF_PRODUCT_ID INTEGER,
                                     IN_NEW_FF_PRODUCT_ID INTEGER) AS
  BEGIN
  
    INSERT INTO ITEM_SET_CATEGORY
      (ITEM_SET_CATEGORY_ID,
       ITEM_SET_CATEGORY_LEVEL,
       ITEM_SET_CATEGORY_NAME,
       CREATED_BY,
       CREATED_DATE_TIME,
       UPDATED_BY,
       UPDATED_DATE_TIME,
       FRAMEWORK_PRODUCT_ID)
      (SELECT SEQ_ITEM_SET_CATEGORY_ID.NEXTVAL, -- new id..
              ITEM_SET_CATEGORY_LEVEL,
              ITEM_SET_CATEGORY_NAME,
              CREATED_BY,
              SYSDATE,
              UPDATED_BY,
              SYSDATE,
              IN_NEW_FF_PRODUCT_ID -- new framework product
         FROM ITEM_SET_CATEGORY
        WHERE FRAMEWORK_PRODUCT_ID = IN_OLD_FF_PRODUCT_ID);
  
  END CREATE_ITEM_SET_CATEGORY;

  /**
  * THIS PROCEDURE WILL TAKE 2 PARENT PRODUCT AS INPUTS AND WILL POPULATE ALL PRODUCTS
  */
  PROCEDURE CREATE_PRODUCT_TESTDATA(IN_OLD_FF_PRODUCT_ID INTEGER,
                                    IN_NEW_FF_PRODUCT_ID INTEGER) AS
  
    V_NEW_PRODUCT_ID INTEGER := 0;
  
  BEGIN
    /** GET LIST OF ALL PRODUCTS FOR THE SAID FRAMEWORK PRODUCT
    */
    FOR DATA IN CUR_GET_PRODUCTS(IN_OLD_FF_PRODUCT_ID) LOOP
      IF DATA.PRODUCT_ID = V_LL_FORM_A THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_A_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_B THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_B_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_ESP THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_ESP_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_C THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_C_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_ESPB THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_ESPB_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_PRC_CD THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_PRC_CD_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_PRC_ESP THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_PRC_ESP_BMT;
      ELSIF DATA.PRODUCT_ID = V_LL_FORM_D THEN
        V_NEW_PRODUCT_ID := V_LL_FORM_D_BMT;
      END IF;
    
      -- CREATE NEW PRODUCTS FOR EACH FRAMEWORK
      INSERT INTO PRODUCT
        (PRODUCT_ID,
         CREATED_DATE_TIME,
         PRODUCT_DESCRIPTION,
         CREATED_BY,
         VERSION,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ACTIVATION_STATUS,
         PRODUCT_TYPE,
         PRODUCT_NAME,
         SCORING_ITEM_SET_LEVEL,
         PREVIEW_ITEM_SET_LEVEL,
         PARENT_PRODUCT_ID,
         EXT_PRODUCT_ID,
         CONTENT_AREA_LEVEL,
         INTERNAL_DISPLAY_NAME,
         SEC_SCORING_ITEM_SET_LEVEL,
         IBS_SHOW_CMS_ID,
         PRINTABLE,
         SCANNABLE,
         KEYENTERABLE,
         BRANDING_TYPE_CODE,
         EISS_TESTING_PROGRAM,
         ACKNOWLEDGMENTS_URL,
         SHOW_STUDENT_FEEDBACK,
         STATIC_MANIFEST,
         SESSION_MANIFEST,
         SUBTESTS_SELECTABLE,
         SUBTESTS_ORDERABLE,
         SUBTESTS_LEVELS_VARY,
         --TUTORIAL_RESOURCE,
         OFF_GRADE_TESTING_DISABLED,
         LICENSE_ENABLED,
         SCORABLE)
        (SELECT V_NEW_PRODUCT_ID, --CHANGE
                SYSDATE,
                PRODUCT_DESCRIPTION || ' BMT', -- CHANGE
                CREATED_BY,
                VERSION,
                NULL,
                SYSDATE,
                ACTIVATION_STATUS,
                PRODUCT_TYPE || 'BMT',
                PRODUCT_NAME || ' BMT', -- CHANGE
                SCORING_ITEM_SET_LEVEL,
                PREVIEW_ITEM_SET_LEVEL,
                IN_NEW_FF_PRODUCT_ID, -- PARENT PRODUCT_ID
                EXT_PRODUCT_ID,
                CONTENT_AREA_LEVEL,
                INTERNAL_DISPLAY_NAME || ' BMT', --CHANGE
                SEC_SCORING_ITEM_SET_LEVEL,
                IBS_SHOW_CMS_ID,
                PRINTABLE,
                SCANNABLE,
                KEYENTERABLE,
                BRANDING_TYPE_CODE,
                EISS_TESTING_PROGRAM,
                ACKNOWLEDGMENTS_URL,
                SHOW_STUDENT_FEEDBACK,
                STATIC_MANIFEST,
                SESSION_MANIFEST,
                SUBTESTS_SELECTABLE,
                SUBTESTS_ORDERABLE,
                SUBTESTS_LEVELS_VARY,
                -- TUTORIAL_RESOURCE,
                OFF_GRADE_TESTING_DISABLED,
                LICENSE_ENABLED,
                SCORABLE
           FROM PRODUCT
          WHERE PRODUCT_ID = DATA.PRODUCT_ID);
    
      -- INSERT TC,TS,TD ITEM-SETS FOR EACH PRODUCT.
      -- ALSO INSERTS ITEM,ITEM_SET_ITEM
      CREATE_ITEM_SET_SCHEDULABLE(DATA.PRODUCT_ID, V_NEW_PRODUCT_ID);
    
      -- CREATE TEST_CATALOG_ENTRIES.
      CREATE_TEST_CATALOG(DATA.PRODUCT_ID, V_NEW_PRODUCT_ID);
    
      -- INSERT ALL ITEM SET PRODUCT FOR PRODUCTS OTHER THAN FF LEVEL
      CREATE_ITEM_SET_PRODUCT(DATA.PRODUCT_ID, V_NEW_PRODUCT_ID);
    
    END LOOP; -- LOOP FOR PRODUCTS.
  
  END CREATE_PRODUCT_TESTDATA;

  /**
  * CREATE RE LEVEL ITEM SET ITEM ENTRIES
  **/
  PROCEDURE CREATE_ITEM_SET_ITEM_RE IS
  BEGIN
    FOR CUR_DATA IN CUR_ALL_RE_DATA LOOP
      INSERT INTO ITEM_SET_ITEM
        (ITEM_SET_ID,
         CREATED_DATE_TIME,
         ITEM_SORT_ORDER,
         CREATED_BY,
         UPDATED_BY,
         UPDATED_DATE_TIME,
         ITEM_ID,
         IBS_INVISIBLE,
         FIELD_TEST,
         SUPPRESSED)
      VALUES
        (CUR_DATA.ITEM_SET_ID,
         SYSDATE,
         CUR_DATA.ITEM_SORT_ORDER,
         2,
         NULL,
         SYSDATE,
         CUR_DATA.ITEM_ID,
         CUR_DATA.IBS_INVISIBLE,
         CUR_DATA.FIELD_TEST,
         CUR_DATA.SUPPRESSED);
    
    END LOOP;
  
  END CREATE_ITEM_SET_ITEM_RE;

  /**
  * Truncate ALL LOOKUP TABLES
  */
  PROCEDURE CLEANUP_LOOKUP_TABLE IS
  BEGIN
    EXECUTE IMMEDIATE ('TRUNCATE TABLE LLO_RP_LOOKUP_ITEM');
    EXECUTE IMMEDIATE ('TRUNCATE TABLE LLO_RP_LOOKUP_ITEM_SET');
    EXECUTE IMMEDIATE ('TRUNCATE TABLE LLO_RP_LOOKUP_ITEM_SET_RE');
  
  END CLEANUP_LOOKUP_TABLE;

  /**
  * INSERT VALUES FOR FRAMEWORK_PRODUCT_PARENT
  */
  PROCEDURE CREATE_FF_PRODUCT_PARENT IS
    V_COUNT INTEGER := 0;
  BEGIN
  
    SELECT COUNT(1)
      INTO V_COUNT
      FROM FRAMEWORK_PRODUCT_PARENT
     WHERE FRAMEWORK_PARENT_PRODUCT_ID = NEW_FF_PARENT_ID;
  
    -- IF NO DATA PRESENT THEN INSERT THE SAME
    IF V_COUNT = 0 THEN
    
      INSERT INTO FRAMEWORK_PRODUCT_PARENT
        (FRAMEWORK_PRODUCT_ID, FRAMEWORK_PARENT_PRODUCT_ID)
      VALUES
        (NEW_1ST_EDITION_PRODUCT, NEW_FF_PARENT_ID);
    
      INSERT INTO FRAMEWORK_PRODUCT_PARENT
        (FRAMEWORK_PRODUCT_ID, FRAMEWORK_PARENT_PRODUCT_ID)
      VALUES
        (NEW_2ND_EDITION_PRODUCT, NEW_FF_PARENT_ID);
    
    END IF;
  END CREATE_FF_PRODUCT_PARENT;

  --MAIN ENTRY POINT .Execute this procedure.
  PROCEDURE COPY_LLO_RP_CONTENT_DATA IS
  BEGIN
  
    dbms_output.put_line('Copy procedure started.');
    CLEANUP_LOOKUP_TABLE(); -- CLEAN LOOKUP TABLES
    dbms_output.put_line('Cleanup tables compelted.');
  
    CREATE_FRAMEWORK_PRODUCT(); -- CREATE PRODUCT ENTRIES
    dbms_output.put_line('Copy compelted for all test data.');
  
    CREATE_FF_PRODUCT_PARENT(); -- CREATE FRAMEWORK PARENT PRODUCT ENTRIES
    dbms_output.put_line('Framework parent product compelted.');
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      dbms_output.put_line('exception');
    
  END COPY_LLO_RP_CONTENT_DATA;

END PKG_COPY_LLO_RP_CONTENT;
/
