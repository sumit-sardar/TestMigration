CREATE OR REPLACE TRIGGER "TRG_USER_ROLE_EOI_D_DEX"
  BEFORE DELETE ON USER_ROLE
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW

DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
  V_CUSTOMER_ID             INTEGER := 0;
  V_ORG_NODE_CATEGORY_ID    INTEGER := 0;
  V_TOP_EOI_ORG_CATEGORY_ID INTEGER := 0;
  V_TOP_38_ORG_CATEGORY_ID  INTEGER := 0;
  V_ORG_NODE_CODE           VARCHAR2(32) := '';
  V_OK_EOI_CUSTOMER         INTEGER := 0;
  V_OK_38_CUSTOMER          INTEGER := 0;
  V_OK_38_ORG_NODE_ID       INTEGER := NULL;
  V_RECORD_COUNT            INTEGER := 0;
  V_EOI_ORG_NODE_ID         INTEGER := NULL;
  V_EOI_USER_ID             INTEGER := NULL;
  V_EOI_ROLE_ID             INTEGER := NULL;
  V_OK38_USER_COUNT         INTEGER := NULL;
  V_OK_38_USER_ID           INTEGER := NULL;
  V_LOGICAL_ERROR           INTEGER := 0;

BEGIN
  V_EOI_ORG_NODE_ID := :OLD.ORG_NODE_ID;
  V_EOI_USER_ID     := :OLD.USER_ID;
  V_EOI_ROLE_ID     := :OLD.ROLE_ID;

  SELECT COUNT(1)
    INTO V_RECORD_COUNT
    FROM OK_EOI_38_REPLICATE_CONFIG
   WHERE ACTIVATION_STATUS = 'AC';

  IF V_RECORD_COUNT = 1 THEN
  
    /*FETCHING THE OK-EOI AND OK3-8 CUSTOMERID*/
    SELECT OK.OK_EOI_CUSTOMER_ID, OK.OK_38_CUSTOMER_ID
      INTO V_OK_EOI_CUSTOMER, V_OK_38_CUSTOMER
      FROM OK_EOI_38_REPLICATE_CONFIG OK
     WHERE ACTIVATION_STATUS = 'AC';
  
    /*FETCHING DETAILS OF THE ORGANISATION FOR WHICH THE USER WAS CREATED*/
    SELECT ORG.CUSTOMER_ID,
           ORG.ORG_NODE_CATEGORY_ID,
           DECODE(ORG.ORG_NODE_CODE, NULL, 'NULL', ORG.ORG_NODE_CODE)
      INTO V_CUSTOMER_ID, V_ORG_NODE_CATEGORY_ID, V_ORG_NODE_CODE
      FROM ORG_NODE ORG
     WHERE ORG.ORG_NODE_ID = V_EOI_ORG_NODE_ID
       AND ORG.ACTIVATION_STATUS = 'AC';
  
    /*IF USER IS ASSOCIATED WITH OK-EOI CUSTOMER THEN ONLY PROCESS FURTHER LOGIC */
    IF V_CUSTOMER_ID = V_OK_EOI_CUSTOMER THEN
    
      /* CHECKING IF THE OK-EOI USER HAS ALREADY ANY OK3-8 USER ASSOCIATED WITH ITSELF */
      SELECT COUNT(1)
        INTO V_OK38_USER_COUNT
        FROM EOI_3TO8_USER_MAPPING OKMAP
       WHERE OKMAP.USER_ID_EOI = V_EOI_USER_ID
         AND OKMAP.ACTIVATION_STATUS = 'AC';
    
      /* IF MAPPING IS ALREADY PRESENT THEN INSERT ONLY INTO USER_ROLE TABLE.
      AS THIS WILL ONLY HAPPEN WHEN ROLE IS UPDATED FOR OK-EOI CUSTOMER
      OR THE OK-EOI USER IS ASSOCIATED WITH ANOTHER ORG_NODE*/
      IF V_OK38_USER_COUNT = 1 THEN
      
        SELECT OKMAP.USER_ID_3TO8
          INTO V_OK_38_USER_ID
          FROM EOI_3TO8_USER_MAPPING OKMAP
         WHERE OKMAP.USER_ID_EOI = V_EOI_USER_ID
           AND OKMAP.ACTIVATION_STATUS = 'AC';
      
        /*FIRST FETCH ALL ORG-NODE  DETAILS OF OK3-8 RELATED TO ORG_NODE OF OK-EOI*/
        IF V_ORG_NODE_CODE = 'NULL' THEN
          SELECT ORG_NODE_CATEGORY_ID
            INTO V_TOP_EOI_ORG_CATEGORY_ID
            FROM (SELECT ORG_NODE_CATEGORY_ID
                    FROM ORG_NODE_CATEGORY ONC
                   WHERE ONC.CUSTOMER_ID = V_OK_EOI_CUSTOMER
                   ORDER BY CATEGORY_LEVEL)
           WHERE ROWNUM = 1;
        
          SELECT ORG_NODE_CATEGORY_ID
            INTO V_TOP_38_ORG_CATEGORY_ID
            FROM (SELECT ORG_NODE_CATEGORY_ID
                    FROM ORG_NODE_CATEGORY ONC
                   WHERE ONC.CUSTOMER_ID = V_OK_38_CUSTOMER
                   ORDER BY CATEGORY_LEVEL)
           WHERE ROWNUM = 1;
        
          /*
          * If this condition satisfies then it means that user is associated with a
          * org that is of top-level.
          */
          IF V_TOP_EOI_ORG_CATEGORY_ID = V_ORG_NODE_CATEGORY_ID THEN
          
            SELECT ORG.ORG_NODE_ID
              INTO V_OK_38_ORG_NODE_ID
              FROM ORG_NODE ORG
             WHERE ORG.CUSTOMER_ID = V_OK_38_CUSTOMER
               AND ORG.ORG_NODE_CATEGORY_ID = V_TOP_38_ORG_CATEGORY_ID
               AND ORG.ACTIVATION_STATUS = 'AC';
          
            V_LOGICAL_ERROR := 1;
          
          ELSE
            /*IF CONTROL ENTERS THE ELSE PART, THIS MEANS AN EOI-ORG_NODE_CODE IS NULL OTHER THAN TOP NODE.
            THEN WE WILL NOT PROCESS ANYTHING.HENCE TRACKING THIS ISSUE WITH THIS VARIABLE.
            THE VALUE OF THIS VARIABLE SHOULD NEVER BE 2.*/
            V_LOGICAL_ERROR := 2;
          
          END IF;
        
        ELSE
        
          SELECT ORG.ORG_NODE_ID
            INTO V_OK_38_ORG_NODE_ID
            FROM ORG_NODE ORG
           WHERE ORG.CUSTOMER_ID = V_OK_38_CUSTOMER
             AND UPPER(ORG.ORG_NODE_CODE) = UPPER(V_ORG_NODE_CODE)
             AND ORG.ACTIVATION_STATUS = 'AC'
             AND ROWNUM = 1;
        
        END IF;
      
        /*IF THIS VALUE IS 2 , THEN DONOT PROCESS ANYTHING FURTHER AS ORG-CODE IS NULL AND THIS EOI-ORGNODE
        IS NOT TOP ORGNODE.*/
        IF V_LOGICAL_ERROR <> 2 THEN
        
          DELETE FROM USER_ROLE
           WHERE USER_ID = V_OK_38_USER_ID
             AND ORG_NODE_ID = V_OK_38_ORG_NODE_ID
             AND ACTIVATION_STATUS = 'AC';
        END IF;
      END IF;
      COMMIT;
    END IF; -- EOI CUSTOMER DATA REPLICATION ENDS
  END IF; -- CONFIG TABLE CHECK END

EXCEPTION
  WHEN OTHERS THEN
  
    DBMS_OUTPUT.put_line('TRIGGER EXCEPTION WHEN USER RECORD UPDATED.');
END;
/
