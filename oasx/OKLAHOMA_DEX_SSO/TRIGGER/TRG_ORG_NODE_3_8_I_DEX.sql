CREATE OR REPLACE TRIGGER "TRG_ORG_NODE_3_8_I_DEX"
  AFTER INSERT ON ORG_NODE
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
 
DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
  V_CUSTOMER_ID             INTEGER := 0;
  V_OK_EOI_CUSTOMER         INTEGER := 0;
  V_OK_38_CUSTOMER          INTEGER := 0;
  V_OK_38_ORG_NODE_ID       INTEGER := NULL;
  V_ORG_NODE_CATEGORY_ID    INTEGER := 0;
  V_ORG_NODE_CODE           VARCHAR2(32) := '';
  V_RECORD_COUNT            INTEGER := 0;
  V_TOP_EOI_ORG_CATEGORY_ID INTEGER := 0;
  V_TOP_38_ORG_CATEGORY_ID  INTEGER := 0;
  V_OK_EOI_ORG_NODE_ID      INTEGER := NULL;
  V_LOGICAL_ERROR           INTEGER := 0;
  V_OK_EOI_ORG_NODE_PRESENT INTEGER := 0;

  CURSOR CUR_EOI_USER_ID(V_EOI_ORG_ID INTEGER) IS
    SELECT UR.USER_ID, UR.ROLE_ID, UR.DATA_IMPORT_HISTORY_ID
      FROM USER_ROLE UR
     WHERE UR.ORG_NODE_ID = V_EOI_ORG_ID
       AND UR.ACTIVATION_STATUS = 'AC';

BEGIN
  V_OK_38_ORG_NODE_ID := :NEW.ORG_NODE_ID;

  SELECT COUNT(1)
    INTO V_RECORD_COUNT
    FROM OK_EOI_38_REPLICATE_CONFIG
   WHERE ACTIVATION_STATUS = 'AC';

  /*CHECKING IF ONLY 1 ROW IS THERE IN CONFIG TABLE WITH 'AC' ACTIVATION STATUS*/
  IF V_RECORD_COUNT = 1 THEN
  
    /*FETCHING THE OK-EOI AND OK3-8 CUSTOMERID*/
    SELECT OK.OK_EOI_CUSTOMER_ID, OK.OK_38_CUSTOMER_ID
      INTO V_OK_EOI_CUSTOMER, V_OK_38_CUSTOMER
      FROM OK_EOI_38_REPLICATE_CONFIG OK
     WHERE ACTIVATION_STATUS = 'AC';
  
    /*FETCHING DETAILS OF THE ORGANISATION FOR WHICH THE USER WAS CREATED*/
  
    V_CUSTOMER_ID          := :NEW.CUSTOMER_ID;
    V_ORG_NODE_CATEGORY_ID := :NEW.ORG_NODE_CATEGORY_ID;
    V_ORG_NODE_CODE        := :NEW.ORG_NODE_CODE;
  
    /*IF USER IS ASSOCIATED WITH OK-3-8 CUSTOMER THEN ONLY PROCESS FURTHER LOGIC */
    IF V_CUSTOMER_ID = V_OK_38_CUSTOMER THEN
    
      /*FIRST FETCH ALL ORG-NODE  DETAILS OF OK3-8 RELATED TO ORG_NODE OF OK-EOI*/
      IF V_ORG_NODE_CODE = 'NULL' THEN
      
        SELECT ORG_NODE_CATEGORY_ID
          INTO V_TOP_EOI_ORG_CATEGORY_ID
          FROM (SELECT ORG_NODE_CATEGORY_ID
                  FROM ORG_NODE_CATEGORY ONC
                 WHERE ONC.CUSTOMER_ID = V_OK_EOI_CUSTOMER
                 ORDER BY CATEGORY_LEVEL)
         WHERE ROWNUM = 1;
      
        SELECT ORG_NODE_CATEGORY_ID
          INTO V_TOP_38_ORG_CATEGORY_ID
          FROM (SELECT ORG_NODE_CATEGORY_ID
                  FROM ORG_NODE_CATEGORY ONC
                 WHERE ONC.CUSTOMER_ID = V_OK_38_CUSTOMER
                 ORDER BY CATEGORY_LEVEL)
         WHERE ROWNUM = 1;
      
        /*
        * If this condition satisfies then it means that user is associated with a
        * org that is of top-level.
        */
        IF V_TOP_38_ORG_CATEGORY_ID = V_ORG_NODE_CATEGORY_ID THEN
        
          SELECT ORG.ORG_NODE_ID
            INTO V_OK_EOI_ORG_NODE_ID
            FROM ORG_NODE ORG
           WHERE ORG.CUSTOMER_ID = V_OK_EOI_CUSTOMER
             AND ORG.ORG_NODE_CATEGORY_ID = V_TOP_EOI_ORG_CATEGORY_ID;
        
          V_LOGICAL_ERROR := 1;
        
        ELSE
          /*IF CONTROL ENTERS THE ELSE PART, THIS MEANS AN OK3-8-ORG_NODE_CODE IS NULL OTHER THAN TOP NODE.
          THEN WE WILL NOT PROCESS ANYTHING.HENCE TRACKING THIS ISSUE WITH THIS VARIABLE.
          THE VALUE OF THIS VARIABLE SHOULD NEVER BE 2.*/
          V_LOGICAL_ERROR := 2;
        
        END IF;
      
      ELSE
      
        SELECT COUNT(ORG.ORG_NODE_ID)
          INTO V_OK_EOI_ORG_NODE_PRESENT
          FROM ORG_NODE ORG
         WHERE ORG.CUSTOMER_ID = V_OK_EOI_CUSTOMER
           AND UPPER(ORG.ORG_NODE_CODE) = UPPER(V_ORG_NODE_CODE)
           AND ORG.ACTIVATION_STATUS = 'AC';
      
        IF V_OK_EOI_ORG_NODE_PRESENT <> 0 THEN
        
          SELECT ORG.ORG_NODE_ID
            INTO V_OK_EOI_ORG_NODE_ID
            FROM ORG_NODE ORG
           WHERE ORG.CUSTOMER_ID = V_OK_EOI_CUSTOMER
             AND UPPER(ORG.ORG_NODE_CODE) = UPPER(V_ORG_NODE_CODE)
             AND ORG.ACTIVATION_STATUS = 'AC'
             AND ROWNUM = 1;
        
        END IF;
      END IF;
    
      /*IF THIS VALUE IS 2 , THEN DONOT PROCESS ANYTHING FURTHER AS ORG-CODE IS NULL AND THIS EOI-ORGNODE
      IS NOT TOP ORGNODE. ALSO DO NOT PROCESS IF THE MATCHING ORG-CODE IS NOT PRESENT IN OK-EOI*/
      IF V_LOGICAL_ERROR <> 2 AND V_OK_EOI_ORG_NODE_PRESENT <> 0 THEN
      
        FOR CUR_RECORD IN CUR_EOI_USER_ID(V_OK_EOI_ORG_NODE_ID) LOOP
        
          INSERT INTO OK_EOI_38_USER_REPLICATE
            (OK_EOI_USER_ID,
             OK_EOI_ROLE_ID,
             OK_EOI_ORG_NODE_ID,
             OK_38_ORG_NODE_ID,
             REPLICATION_STATUS,
             CREATED_DATE_TIME,
             UPDATED_DATE_TIME)
          VALUES
            (CUR_RECORD.USER_ID,
             CUR_RECORD.ROLE_ID,
             V_OK_EOI_ORG_NODE_ID,
             V_OK_38_ORG_NODE_ID,
             'NEW',
             SYSDATE,
             NULL);
        
        END LOOP; -- LOOP FOR EACH USER PRESENT IN OK EOI CUSTOMER           
      END IF; -- LOGICAL ERROR CHECK
    END IF; -- OK3-8 CUSTOMER DATA REPLICATION ENDS    
  END IF; -- CONFIG TABLE CHECK END
  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('ORG NODE TRIGGER EXCEPTION WHEN RECORD INSERTED.' ||
                         SQLERRM || '~' || SQLCODE);
  
END;
/
