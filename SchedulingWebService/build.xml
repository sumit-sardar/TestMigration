<project default="build">
  
  <description>
    Project build script. All public targets require the "workspace" property to be
    set at invocation. It can either point at the Eclipse workspace directory that
    this project belongs to or an exported workspace.xml file. The wl.home property
    may also need to be specified unless WL_HOME environment variable is defined.
    The workshop.home property may also need to be specified unless WORKSHOP_HOME
    environment variable is defined.
  </description>
  
  <target name="init.env" unless="init.env.executed">
    <property name="init.env.executed" value="true"/>
    <property environment="env"/>
    <condition property="wl.home" value="${env.WL_HOME}">
      <isset property="env.WL_HOME"/>
    </condition>
    <fail unless="wl.home" message="The wl.home property needs to be set!"/>
    <condition property="workshop.home" value="${env.WORKSHOP_HOME}">
      <isset property="env.WORKSHOP_HOME"/>
    </condition>
    <fail unless="workshop.home" message="The workshop.home property needs to be set!"/>
  </target>
   
  <target name="init.typedefs" depends="check.params,check.versions" unless="init.typedefs.executed">
    
    <property name="init.typedefs.executed" value="true"/>
    <echo message="Using Workshop Libraries located in the &quot;${workshop.lib.dir}&quot; directory."/>
    
    <typedef resource="com/bea/workshop/cmdline/antlib/antlib.xml">
      <classpath>
        <fileset dir="${workshop.lib.dir}" includes="*.jar"/>
      </classpath>
    </typedef>
    
    <typedef resource="com/bea/workshop/wls/antlib/antlib.xml">
      <classpath>
        <fileset dir="${workshop.lib.dir}" includes="*.jar"/>
      </classpath>
    </typedef>
    
  </target>
   
  <target name="check.versions" depends="check.params" unless="check.versions.executed">
    <property name="check.versions.executed" value="true"/>
    <taskdef name="check-versions" classname="com.bea.workshop.cmdline.antlib.CheckManifestVersionTask">
      <classpath>
        <fileset dir="${workshop.lib.dir}" includes="*.jar"/>
      </classpath>
    </taskdef>
    <check-versions>
      <jar path="${workshop.lib.dir}/workshop-antlib.jar" version="[2.0.0,3.0.0)"/>
      <jar path="${workshop.lib.dir}/workshop-util.jar" version="[1.2.0,3.0.0)"/>
      <jar path="${workshop.lib.dir}/workshop-wls.jar" version="[1.0.0,2.0.0)"/>
      <jar path="${workshop.lib.dir}/workshop-wls-antlib.jar" version="[1.0.0,2.0.0)"/>
      <jar path="${workshop.lib.dir}/workshop-controls-antlib.jar" version="[1.0.0,2.0.0)"/>
    </check-versions>
  </target>
   
  <target name="check.params" depends="init.env" unless="check.params.executed">
    <property name="check.params.executed" value="true"/>
    <condition property="workspace" value="${env.WORKSHOP_WORKSPACE}">
      <isset property="env.WORKSHOP_WORKSPACE"/>
    </condition>
    <fail unless="workspace" message="The workspace property needs to be set!"/>
    <condition property="workshop.lib.dir" value="${env.WORKSHOP_LIB_DIR}">
      <isset property="env.WORKSHOP_LIB_DIR"/>
    </condition>
    <fail unless="workshop.lib.dir" message="The workshop.lib.dir property needs to be set!"/>
  </target>
   
  <target name="init" depends="init.env,check.params,check.versions,init.typedefs" unless="init.executed">
    
    <property name="init.executed" value="true"/>
    
    <dirname property="project.dir" file="${ant.file}"/>
    <property name="echo.metadata" value="false"/>
    
    <mdimport workspace="${workspace}" pjdir="${project.dir}" echo="${echo.metadata}">
      <option name="skipAnnotationProcessors" value="com.bea.workshop.webservices.core"/>
    </mdimport>
    
    <property name="archive.name" value="${project.name}.war"/>
    <property name="uri" value="${archive.name}"/>
    <property name="generated.module.root" value="${project.dir}/build/weboutput"/>
    
    <path id="weblogic.jar.classpath"> 
      <path location="${patch.home}/weblogic_patch.jar" />
      <path location="${wl.home}/server/lib/weblogic.jar" />
    </path>
    
    <property name="assembly.src" value="${project.dir}/build/assembly/.src"/>
    
  </target>
  
  <target name="build" depends="init" description="compiles the source files; does not package the results">
    
    <if>
      <isreference refid="apt.factory.path"/>
      <then>
        <mkdir dir="${apt.src.output.dir}"/>
        <for-each-java-src-path>
          <if>
            <available file="${.java.src.dir}"/>
            <then>
              <mkdir dir="${.java.src.output}"/>
     
              <!-- this property is added to get around JDK 6 issues-->
    		   <!-- the class it refers to lives at BEA_HOME/modules/com.bea.core.controls.runtime_X.X.X.X.jar-->
    		   <!-- and has been added to the apt.factory.path -->
              <property name="aggregated.factory.class" 
                   value="com.bea.workshop.controls.runtime.generator.AggregatedAnnotationProcessorFactory" />
     
              <apt
                sourcepath="${java.sourcepath}"
                srcdir="${.java.src.dir}"
                includes="${.java.src.include}"
                excludes="${.java.src.exclude}"
                destdir="${.java.src.output}"
                preprocessdir="${apt.src.output.dir}"
                classpathref="java.classpath"
                factory="${aggregated.factory.class}" 
                factorypathref="apt.factory.path"
                options="${apt.options}"
                compile="false"
                memoryMaximumSize="1024m"/>
            </then>
          </if>
        </for-each-java-src-path>
      </then>
    </if>
    
    <for-each-java-src-path>
      <if>
        <available file="${.java.src.dir}"/>
        <then>
          <mkdir dir="${.java.src.output}"/>
          <javac
            sourcepath="${java.sourcepath}"
            srcdir="${.java.src.dir}"
            includes="${.java.src.include}"
            excludes="${.java.src.exclude}"
            destdir="${.java.src.output}"
            classpathref="java.classpath"
            debug="on"/>
        </then>
      </if>
    </for-each-java-src-path>
    
    <delete dir="${generated.module.root}"/>
    <mkdir dir="${generated.module.root}"/>
    
    <resolve-path property="user.web.xml" path="WEB-INF/web.xml"/>
    <resolve-path property="user.weblogic.xml" path="WEB-INF/weblogic.xml"/>
    <copy todir="${generated.module.root}/WEB-INF" file="${user.web.xml}" />
    <copy todir="${generated.module.root}/WEB-INF" file="${user.weblogic.xml}" failonerror="false" />
    
  </target>
  
  <target name="assemble" depends="init" description="assembles the project for iterative dev deployment; requires that the &quot;ear.root&quot; property is specified">
    
    <property name="prefix" value=""/>
     
    <for-each-resource-path>
      <link ear="${ear.root}" source="${.resource.path}" target="${prefix}${uri}/${.resource.prefix}"/>
    </for-each-resource-path>
    
    <!-- Link in referenced utility projects into the WEB-INF/lib directory. -->
     
    <for-each-referenced-component>
      <if>
        <and>
          <equals arg1="${.referenced.component.type}" arg2="project"/>
          <equals arg1="${.referenced.component.target.path}" arg2="WEB-INF/lib"/>
        </and>
        <then>
          <antex
            antfile="${.referenced.component.handle}/build.xml"
            dir="${.referenced.component.handle}"
            target="assemble"
            inheritUserProps="false"
            inheritAll="false"
            inheritRefs="false">
            <property name="workshop.home" value="${workshop.home}"/>
            <property name="workshop.lib.dir" value="${workshop.lib.dir}"/>
            <property name="wl.home" value="${wl.home}"/>
            <property name="patch.home" value="${patch.home}"/>
            <property name="workspace" value="${workspace}"/>
            <property name="echo.metadata" value="${echo.metadata}"/>
            <property name="init.typedefs.executed" value="true"/>
            <property name="ear.root" value="${ear.root}"/>
            <property name="prefix" value="${uri}/WEB-INF/lib/"/>
            <propertyset>
              <propertyref regex="${path.vars.regex}"/>
            </propertyset>
          </antex>
        </then>
      </if>
    </for-each-referenced-component>
    
    <link ear="${ear.root}" source="${generated.module.root}" target="${uri}"/>
    <antcall target="assembly" inheritAll="true" inheritRefs="true" > 
      <param name="ear.root" value="${ear.root}"/> 
    </antcall> 
    
    <antcall target="webservice.build" inheritAll="true" inheritRefs="true" /> 
    
  </target>
  
  <target name="stage" depends="init" description="copies all of project's resources and build artifacts into a form that's ready for archive creation; staging directory can be overridden via the &quot;staging.dir&quot; property">
    
    <property name="staging.dir" value="${project.dir}/.staging"/>
     
    <delete dir="${staging.dir}" quiet="true"/>
    <mkdir dir="${staging.dir}"/>
     
    <antcall target="assembly" inheritAll="true" inheritRefs="true" > 
      <param name="ear.root" value="${ear.staging.dir}"/> 
    </antcall> 
    
    <antcall target="webservice.build" inheritAll="true" inheritRefs="true" /> 
     
    <for-each-resource-path>
      <if>
        <available file="${.resource.path}"/>
        <then>
          <if>
            <isfile path="${.resource.path}"/>
            <then>
              <copy file="${.resource.path}" tofile="${staging.dir}/${.resource.prefix}"/>
            </then>
            <else>
              <copy todir="${staging.dir}/${.resource.prefix}">
                <fileset dir="${.resource.path}" includes="${.resource.include}" excludes="${.resource.exclude}"/>
              </copy>
            </else>
          </if>
        </then>
      </if>
    </for-each-resource-path>
    
    <!-- Packaged referenced utility projects into the WEB-INF/lib directory. -->
     
    <property name="webinflib" value="${staging.dir}/WEB-INF/lib"/>
    <mkdir dir="${webinflib}"/>
     
    <for-each-referenced-component>
      <if>
        <and>
          <equals arg1="${.referenced.component.type}" arg2="project"/>
          <equals arg1="${.referenced.component.target.path}" arg2="WEB-INF/lib"/>
        </and>
        <then>
          <antex
            antfile="${.referenced.component.handle}/build.xml"
            dir="${.referenced.component.handle}"
            target="archive"
            inheritUserProps="false"
            inheritAll="false"
            inheritRefs="false">
            <property name="workshop.home" value="${workshop.home}"/>
            <property name="workshop.lib.dir" value="${workshop.lib.dir}"/>
            <property name="wl.home" value="${wl.home}"/>
            <property name="patch.home" value="${patch.home}"/>
            <property name="workspace" value="${workspace}"/>
            <property name="echo.metadata" value="${echo.metadata}"/>
            <property name="init.typedefs.executed" value="true"/>
            <property name="archive.dir" value="${webinflib}"/>
            <propertyset>
              <propertyref regex="${path.vars.regex}"/>
            </propertyset>
          </antex>
        </then>
      </if>
    </for-each-referenced-component>
    
    <if>
      <available file="${generated.module.root}"/>
      <then>
        <copy todir="${staging.dir}" overwrite="true">
          <fileset dir="${generated.module.root}"/>
        </copy>
      </then>
    </if>
    
    <!-- precompile JSPs into the WEB-INF/classes directory. -->
     
    <if>
      <equals arg1="${compile.jsp}" arg2="true" />
      <then>
        <if>
         	<available file="${java.home}/lib/tools.jar"/>
         	<then>
         	  <property name="jdk.home" value="${java.home}" />
         	</then>
         	<else>
    		  <if>
    		    <available file="${java.home}/../lib/tools.jar"/>
    		    <then>
    			  <property name="jdk.home" value="${java.home}/.." />
    		    </then>
            </if>
          </else>
        </if>
        <fail message="Weblogic JSP Compiler requires JDK. Please run ANT with java from a JDK isntallation.">
        	<condition>
    		   <not>
    			 <available file="${jdk.home}/lib/tools.jar"/>
    		   </not>
    		</condition>
        </fail>
        <path id="jspc.classpath">
         	<path refid="java.classpath"/>
        	<pathelement location="${jdk.home}/lib/tools.jar" />
           <pathelement location="${wl.home}/server/lib/weblogic.jar" />
        </path>
        <jspc classpathref="jspc.classpath" source="${staging.dir}" library="${appc.library}">
        </jspc>
      </then>
    </if>
    
  </target>
  
  <target name="archive" depends="stage" description="creates an archive containing all projects's resources and build artifacts; archive name and location can be overridden via the &quot;archive.dir&quot; and &quot;archive.name&quot; properties.">
    
    <property name="archive.dir" value="${project.dir}"/>
    <mkdir dir="${archive.dir}"/>
     
    <zip destfile="${archive.dir}/${archive.name}" encoding="UTF8" whenempty="create">
      <fileset dir="${staging.dir}"/>
    </zip>
    
  </target>
  
  <target name="clean" depends="init" description="removes the files and directories generated by the build target">
    
    <if>
      <available file="${apt.src.output.dir}"/>
      <then>
        <delete includeEmptyDirs="true">
          <fileset dir="${apt.src.output.dir}" includes="**/*"/>
        </delete>
      </then>
    </if>
    
    <for-each-java-src-path>
      <if>
        <available file="${.java.src.output}"/>
        <then>
          <if>
            <equals arg1="${.java.src.dir}" arg2="${.java.src.output}"/>
            <then>
              <delete includeEmptyDirs="true">
                <fileset dir="${.java.src.output}">
                  <or>
                    <filename name="**/*.class"/>
                    <and>
                      <type type="dir"/>
                      <depth min="0"/>
                    </and>
                  </or>
                </fileset>
              </delete>
            </then>
            <else>
              <delete includeEmptyDirs="true">
                <fileset dir="${.java.src.output}" includes="**/*"/>
              </delete>
            </else>
          </if>
        </then>
      </if>
    </for-each-java-src-path>
    
    
    <delete dir="${assembly.src}"/>
    <delete dir="${generated.module.root}"/>
    
    <mkdir dir="${generated.module.root}"/>
    
  </target>
  
  <target name="clean.all" depends="clean" description="removes the files and directories generated by build, stage and archive targets">
    
    <property name="staging.dir" value="${project.dir}/.staging"/>
    <delete dir="${staging.dir}"/>
     
    <property name="archive.dir" value="${project.dir}"/>
    <delete file="${archive.dir}/${archive.name}"/>
    
  </target>
  
  <target name="stage.to.ear" depends="init">
    
    <property name="prefix" value=""/>
     
    <antcallex target="archive" inheritUserProps="false" inheritAll="false" inheritRefs="false">
      <param name="workshop.home" value="${workshop.home}"/>
      <param name="workshop.lib.dir" value="${workshop.lib.dir}"/>
      <param name="wl.home" value="${wl.home}"/>
      <param name="patch.home" value="${patch.home}"/>
      <param name="workspace" value="${workspace}"/>
      <param name="echo.metadata" value="${echo.metadata}"/>
      <param name="init.typedefs.executed" value="true"/>
      <param name="archive.dir" value="${ear.staging.dir}${prefix}"/>
      <param name="ear.staging.dir" value="${ear.staging.dir}"/>
      <param name="compile.jsp" value="${compile.jsp}" />
      <param name="appc.library" value="${appc.library}" />
      <propertyset>
        <propertyref regex="${path.vars.regex}"/>
      </propertyset>
    </antcallex>
    
  </target>
  
  <target name="generated.root.init" depends="init">
    
    <property name="generated.module.root" value="${project.dir}/build/weboutput"/>
    
    <path id="weblogic.jar.classpath"> 
      <path location="${patch.home}/weblogic_patch.jar" />
      <path location="${wl.home}/server/lib/weblogic.jar" />
    </path>
    
  </target>
  
  <target name="assembly" depends="init,generated.root.init">
    
    <if>
      <not>
        <isreference refid="apt.factory.path"/>
      </not>
      <then>
        <fail message="The apt.factory.path was not set, but the beehive annotation processors must be on the apt factory path." />
      </then>
    </if>
    
    <taskdef name="assemble" 
        classname="com.bea.control.assembly.AssembleTask"  
        onerror="report" > 
        <classpath> 
            <path refid="weblogic.jar.classpath" />
            <path refid="java.classpath" />
        </classpath> 
    </taskdef> 
    
    <property name="assembly.src.output" value="${java.src.0.output}"/>
    <mkdir dir="${assembly.src}"/>
    
    <!-- If the xbean builder is in use, its wsdls must be on the assembly classpath
         for the ServiceControlAssembler to find them during assembly.  If the builder
         is not in use, the xbean.src entries have no effect. -->
    <path id="assembly.classpath">
         <path refid="weblogic.jar.classpath" />
         <path refid="java.classpath" />
         <pathelement location="${assembly.src.output}" />
         <pathelement path="${java.outpath}" />
         <pathelement path="${java.sourcepath}"/>
         <pathelement path="${xbean.src.0.dir}"/>
         <pathelement path="${xbean.src.1.dir}"/>
         <pathelement path="${xbean.src.2.dir}"/>
         <pathelement path="${xbean.src.3.dir}"/>
         <pathelement path="${xbean.src.4.dir}"/>
         <pathelement path="${xbean.src.5.dir}"/>
         <pathelement path="${xbean.src.6.dir}"/>
         <pathelement path="${xbean.src.7.dir}"/>
         <pathelement path="${xbean.src.8.dir}"/>
         <pathelement path="${xbean.src.9.dir}"/>
    </path>
    
    <assemble 
        moduleDir="${generated.module.root}" 
        moduleName="${project.name}" 
        srcOutputDir="${assembly.src}"
        appRootDir="${ear.root}">
    
        <assemblyContext factory="org.apache.beehive.controls.runtime.assembly.WebAppAssemblyContext$Factory" />
        <assemblyContext factory="org.apache.beehive.controls.runtime.assembly.AppAssemblyContext$Factory" />
        <classpath refid="assembly.classpath" />
        <fileset dir="${project.dir}">
            <include name="**/*.controls.properties" />
        </fileset>
    </assemble>
     
    <!-- this property is added to get around JDK 6 issues -->
    <!-- the class it refers to lives at BEA_HOME/modules/com.bea.core.controls.runtime_X.X.X.X.jar-->
    <!-- and has been added to the apt.factory.path --> 
    <property name="aggregated.factory.class" 
         value="com.bea.workshop.controls.runtime.generator.AggregatedAnnotationProcessorFactory" />
     
    <apt
      srcdir="${assembly.src}"
      preprocessdir="${apt.src.output.dir}"
      factory="${aggregated.factory.class}" 
      factorypathref="apt.factory.path"
      options="${apt.options}"
      compile="false">
        <classpath refid="assembly.classpath" />
    </apt>
     
    <javac
      srcdir="${assembly.src}"
      destdir="${assembly.src.output}"
      debug="on">
        <classpath refid="assembly.classpath" />
    </javac>
    
  </target>
  
  <target name="webservice.build" depends="init,generated.root.init">
    
    <path id="jwsc.srcpath">
      <path path="${java.sourcepath}" />
      <pathelement path="build/assembly/.src" />
    </path>
    
    <taskdef name="jwsc" classname="weblogic.wsee.tools.anttasks.JwscTask" >
      <classpath> 
        <path refid="weblogic.jar.classpath" />
      </classpath> 
    </taskdef>
    
    <property name="jwsc.module.root" value="${project.dir}/build/weboutput"/>
    
    <property name="jwsc.contextpath" value="SchedulingWebService"/>
    
    <property name="jwsc.srcpath.prop" refid="jwsc.srcpath"/>
    
    <path id="jwsc.classpath">
      <path refid="weblogic.jar.classpath" />
      <path refid="java.classpath" />
      <pathelement path="${java.outpath}" />
    </path>
    
    <jwsc 
        destdir="${project.dir}/build"
        classpathref="jwsc.classpath"
        >
      <module name="weboutput" explode="true" contextPath="${jwsc.contextpath}">
          <jwsFileSet srcdir="${jwsc.srcpath.prop}" type="JAXRPC"> 
            <include name="**/*.java"/> 
          </jwsFileSet> 
        <descriptor file="${jwsc.module.root}/WEB-INF/web.xml" />
        <descriptor file="${jwsc.module.root}/WEB-INF/weblogic.xml" />
      </module>
    </jwsc>
    
  </target>
  
</project>