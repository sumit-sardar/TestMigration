package com.ctb.control.db;

import java.sql.Clob;
import java.sql.SQLException;

import org.apache.beehive.controls.api.bean.ControlExtension;
import org.apache.beehive.controls.system.jdbc.JdbcControl;

import com.ctb.bean.testAdmin.ResponsePoints;
import com.ctb.bean.testAdmin.RosterElement;
import com.ctb.bean.testAdmin.RubricViewData;//Added for rubric view
import com.ctb.bean.testAdmin.ScorableItem;
import com.ctb.bean.testAdmin.TestSession;

@ControlExtension
@JdbcControl.ConnectionDataSource(jndiName = "oasDataSource")
public interface CRScoring extends JdbcControl {
	
	static final long serialVersionUID = 1L;
	
	//score by student: all student list from test admin  to avoid multiple database hit for checking student status
	 @JdbcControl.SQL(statement = "SELECT DISTINCT ROS.TEST_ROSTER_ID AS TESTROSTERID, ROS.TEST_ADMIN_ID AS TESTADMINID, TCSC.TEST_COMPLETION_STATUS_DESC AS TESTCOMPLETIONSTATUSDESC, ROS.VALIDATION_STATUS AS VALIDATIONSTATUS, STU.GRADE AS GRADE, ROS.STUDENT_ID AS STUDENTID, ROS.CUSTOMER_ID AS CUSTOMERID, OAS_UTILS.GET_SCORING_STATUS_BY_ROSTER(ROS.test_roster_id) AS SCORINGSTATUS, ROS.FORM_ASSIGNMENT AS FORMASSIGNMENT, STU.FIRST_NAME AS FIRSTNAME,  STU.MIDDLE_NAME AS MIDDLENAME, STU.LAST_NAME AS LASTNAME, STU.EXT_PIN1 AS EXTPIN1, STU.USER_NAME AS USERNAME, TAD.ITEM_SET_ID AS ITEMSETIDTC, STU.USER_NAME AS STUDENTUSERNAME, CONCAT(CONCAT(STU.LAST_NAME, ', '), CONCAT(STU.FIRST_NAME, CONCAT(' ', STU.MIDDLE_NAME))) AS STUDENTNAME FROM TEST_ROSTER ROS, STUDENT STU, TEST_COMPLETION_STATUS_CODE TCSC, TEST_ADMIN TAD, ORG_NODE NODE, ORG_NODE_STUDENT ONS, ORG_NODE_ANCESTOR ONA, USERS USERS, USER_ROLE UROLE, STUDENT_ITEM_SET_STATUS SIS WHERE TAD.TEST_ADMIN_ID = {testAdminId} AND TAD.TEST_ADMIN_ID = ROS.TEST_ADMIN_ID AND ROS.TEST_ROSTER_ID = SIS.TEST_ROSTER_ID AND STU.STUDENT_ID = ROS.STUDENT_ID AND TCSC.TEST_COMPLETION_STATUS IN ('CO', 'IS', 'IC') AND TCSC.TEST_COMPLETION_STATUS = SIS.COMPLETION_STATUS AND STU.ACTIVATION_STATUS = 'AC' AND ROS.ACTIVATION_STATUS = 'AC' AND ROS.VALIDATION_STATUS IN ('VA', 'PI') AND nvl(ROS.STUDENT_EXPORTED,'F') = 'F' AND USERS.USER_NAME = {userName} AND USERS.USER_ID = UROLE.USER_ID AND UROLE.ACTIVATION_STATUS = 'AC' AND ONA.ANCESTOR_ORG_NODE_ID = UROLE.ORG_NODE_ID AND ONA.ORG_NODE_ID = ONS.ORG_NODE_ID AND ONS.ORG_NODE_ID = ONA.ORG_NODE_ID AND NODE.ORG_NODE_ID = ONS.ORG_NODE_ID AND STU.STUDENT_ID = ONS.STUDENT_ID AND SIS.VALIDATION_STATUS = 'VA'   AND SIS.ABSENT <> 'Y' AND SIS.EXEMPTIONS <> 'Y' AND EXISTS (SELECT 1 FROM ITEM_SET_ITEM IST, ITEM ITEM, STUDENT_ITEM_SET_STATUS SISS WHERE IST.ITEM_SET_ID = SISS.ITEM_SET_ID AND ITEM.ITEM_ID = IST.ITEM_ID AND ITEM.ITEM_TYPE = 'CR' AND SISS.TEST_ROSTER_ID = ROS.TEST_ROSTER_ID AND SISS.COMPLETION_STATUS IN ('CO', 'IS', 'IC') AND SISS.VALIDATION_STATUS = 'VA' AND SISS.ABSENT <> 'Y' AND SISS.EXEMPTIONS <> 'Y' AND (ITEM.ANSWER_AREA IS NULL OR ITEM.ANSWER_AREA = 'AudioItem') AND ROWNUM =1) order by STU.USER_NAME",
             arrayMaxLength = 0, fetchSize=1000)
	RosterElement [] getAllStudentForTestSession(Integer testAdminId, String userName) throws SQLException;
	 
	// score by item: all student list from test session and itemsetID
	 @JdbcControl.SQL(statement = "select roster.TEST_ROSTER_ID   as testRosterId, roster.TEST_ADMIN_ID    as testAdminId, tcsc.test_completion_status_desc testCompletionStatusDesc, stu.grade     as grade, roster.STUDENT_ID   as studentId, roster.CUSTOMER_ID   as customerId, stu.first_name  as firstName, stu.middle_name   as middleName, stu.last_name   as lastName, stu.ext_pin1     as extPin1, stu.user_name     as userName, iset.ext_tst_item_set_id  as extItemSetId from student_item_set_status     sis, test_roster                 roster, student  stu, test_completion_status_code tcsc, item  it, item_response_cr            irs, item_set                    iset where sis.item_set_id = {itemSetId} and iset.item_set_id = sis.item_set_id and roster.test_admin_id = {testAdminId} and roster.test_roster_id = sis.test_roster_id and stu.student_id = roster.student_id and tcsc.test_completion_status = sis.COMPLETION_STATUS AND NVL(ROSTER.STUDENT_EXPORTED, 'F') = 'F' and tcsc.test_completion_status in ('CO', 'IS', 'IC') and stu.activation_status = 'AC' and roster.activation_status = 'AC' and roster.validation_status in ('VA', 'PI') and sis.validation_status = 'VA' and sis.absent <> 'Y' and sis.exemptions <> 'Y' and irs.item_set_id = sis.item_set_id and irs.item_id = {itemId} and irs.item_id = it.item_id and irs.test_roster_id = roster.test_roster_id and (DECODE((select nvl(p.delivery_client_id, 1) from product p,test_admin ta where ta.product_id=p.product_id and ta.test_admin_id ={testAdminId}), 2, DECODE(IT.ANSWER_AREA, NULL, DECODE(DBMS_LOB.GETLENGTH(IRS.CONSTRUCTED_RESPONSE), NULL, 0, DECODE(INSTR(CONSTRUCTED_RESPONSE, 'CDATA'), 0, 0, 1)), DECODE(IRS.AUDIO_URL, NULL, 0, 1)), DECODE(DBMS_LOB.GETLENGTH(IRS.CONSTRUCTED_RESPONSE), NULL, 0, DECODE(IT.ANSWER_AREA, NULL, DECODE(INSTR(CONSTRUCTED_RESPONSE, 'CDATA'), 0, 0, 1), 1)))) = 1",
             arrayMaxLength = 0, fetchSize=1000)
	 RosterElement [] getAllStudentForTestSessionAndTD(Integer testAdminId, Integer  itemSetId, String itemId) throws SQLException;
	 
	//get items from  in score by student
	/* @JdbcControl.SQL(statement = "select iset.item_set_id as itemSetId, iset.item_set_name as itemSetName, isi.item_sort_order as itemSetOrder, isi.item_id as itemId, decode(it.answer_area,null,'CR','AI') as itemType, (select max_points from datapoint dpoint where item_id = isi.item_Id and rownum = 1) as maxPoints ,  (select min_points from datapoint dpoint where item_id = isi.item_Id and rownum = 1) minPoints  from item_set_item  isi, item it, item_set iset, item_set_ancestor isa, student_item_set_status sis where isi.item_set_id = isa.item_set_id and it.item_id = isi.item_id and isa.item_set_type = 'TD' and isa.ancestor_item_set_id = {itemSetId} and sis.test_roster_id = {testRosterId}   and isa.item_set_id = sis.item_set_id and ((upper(it.item_type) = 'CR' and (it.answer_area is null or upper(it.answer_area) = upper('AudioItem')))) and iset.item_set_id = isi.item_set_id order by isi.item_set_id, isi.item_sort_order",
             arrayMaxLength = 1000)
	 ScorableItem [] getAllScorableCRItemsForTestRoster(Integer  testRosterId , Integer  itemSetId) throws SQLException;
	*/
	 
	//Changes for defect #65996
	 @JdbcControl.SQL(statement = "select distinct dpoint.max_points as maxPoints, dpoint.min_points as minPoints, dpoint.item_id as itemId, nvl(irp.points, 0) as scorePoint, studentDetails.itemSetId as itemSetId, studentDetails.itemSetName as itemSetName, studentDetails.itemSetOrder as itemSetOrder, studentDetails.itemType as itemType, decode(nvl(irp.item_response_id, -1), -1, 'Incomplete', 'Complete') as scoreStatus, decode(nvl(IR.ITEM_RESPONSE_ID, -1), -1, 'NA', decode(studentDetails.itemType, 'CR', (select decode(instr(constructed_response, 'CDATA'), 0, 'NA', 'A') from item_response_cr where item_id = studentDetails.itemId and test_roster_id = studentDetails.testRosterId and item_set_id = studentDetails.itemSetId), 'AI', decode(studentDetails.deliveryClientId, 2, (select decode(count(1), 0, 'NA', 'A') from item_response_cr where item_id = studentDetails.itemId and test_roster_id = studentDetails.testRosterId and item_set_id = studentDetails.itemSetId and audio_url is not null),                                     (select decode(count(1), 0, 'NA', 'A') from item_response_cr where item_id = studentDetails.itemId and test_roster_id = studentDetails.testRosterId and item_set_id = studentDetails.itemSetId and constructed_response is not null)))  ) as answered, studentDetails.parentProductId as parentProductId, studentDetails.test_admin_id as testAdminId, studentDetails.deliveryClientId as deliveryClientId, studentDetails.extItemSetId as extItemSetId from (select iset.item_set_id as itemSetId, iset.ext_tst_item_set_id as extItemSetId, iset.item_set_name as itemSetName, isi.item_sort_order as itemSetOrder, isi.item_id as itemId, decode(it.answer_area, null, 'CR', 'AI') as itemType, tr.test_admin_id as test_admin_id, tr.test_roster_id as testRosterId, (select item_set_id from datapoint where item_id = isi.item_id and rownum = 1) as reItemSetId, nvl(p.delivery_client_id, 1) as deliveryClientId, p.parent_product_id as parentProductId from item_set_item    isi, item    it, item_set  iset, item_set_ancestor    isa, student_item_set_status sis, TEST_ROSTER    TR, test_Admin ta, product   p where isi.item_set_id = isa.item_set_id and it.item_id = isi.item_id and isa.item_set_type = 'TD' and isa.ancestor_item_set_id = {itemSetId} and sis.test_roster_id = {testRosterId} and sis.test_roster_id = tr.test_roster_id and tr.test_Admin_id = ta.test_admin_id and ta.product_id = p.product_id and sis.completion_status in ('CO', 'IS') and sis.validation_status = 'VA' AND SIS.ABSENT <> 'Y' AND SIS.EXEMPTIONS <> 'Y' and isa.item_set_id = sis.item_set_id and ((upper(it.item_type) = 'CR' and (it.answer_area is null or upper(it.answer_area) = upper('AudioItem')))) and iset.item_set_id = isi.item_set_id) studentDetails, ITEM_RESPONSE IR, datapoint dpoint, item_response_points irp where dpoint.item_id = studentDetails.itemId and studentDetails.testRosterId = IR.TEST_ROSTER_ID(+) AND studentDetails.itemSetId = IR.ITEM_SET_ID(+) AND studentDetails.itemId = IR.ITEM_ID(+) AND (IR.RESPONSE_SEQ_NUM IS NULL OR IR.RESPONSE_SEQ_NUM = (SELECT MAX(IRM.RESPONSE_SEQ_NUM) FROM ITEM_RESPONSE IRM WHERE studentDetails.testRosterId = IRM.TEST_ROSTER_ID AND studentDetails.itemSetId = IRM.ITEM_SET_ID AND studentDetails.itemId = IRM.ITEM_ID GROUP BY studentDetails.testRosterId, studentDetails.itemSetId, studentDetails.itemId)) and dpoint.item_set_id = studentDetails.reItemSetId and irp.item_Response_Id(+) = nvl(IR.ITEM_RESPONSE_ID, -1) order by studentDetails.itemSetId, studentDetails.itemSetOrder",
			 arrayMaxLength = 10000)
	ScorableItem [] getAllScorableCRItemsForTestRoster(Integer  testRosterId , Integer  itemSetId) throws SQLException;

	 
	 
	 //get items from test session in score by item
	 //Changed on 10 sep to get parent product id for bifurcating the swf and js file load logic.
	 @JdbcControl.SQL(statement = "SELECT ISET.ITEM_SET_ID AS ITEMSETID,ISET.ITEM_SET_NAME AS ITEMSETNAME, ISI.ITEM_SORT_ORDER AS ITEMSETORDER, ISI.ITEM_ID AS ITEMID, TAD.Item_Set_Id AS itemSetIdTC, DECODE(IT.ANSWER_AREA, NULL, 'CR', 'AI') AS ITEMTYPE, IT.ITEM_TYPE AS TESTITEMTYPE, (SELECT MAX_POINTS FROM DATAPOINT DPOINT WHERE ITEM_ID = ISI.ITEM_ID AND ROWNUM = 1) AS MAXPOINTS, (SELECT MIN_POINTS FROM DATAPOINT DPOINT WHERE ITEM_ID = ISI.ITEM_ID AND ROWNUM = 1) MINPOINTS, (SELECT count(ROSTER.TEST_ROSTER_ID) FROM STUDENT_ITEM_SET_STATUS SIS, TEST_ROSTER ROSTER, STUDENT STU, TEST_COMPLETION_STATUS_CODE TCSC,         ITEM_RESPONSE_CR            IRS   WHERE SIS.ITEM_SET_ID = ISI.ITEM_SET_ID     AND ROSTER.TEST_ADMIN_ID = TAD.TEST_ADMIN_ID     AND ROSTER.TEST_ROSTER_ID = SIS.TEST_ROSTER_ID     AND STU.STUDENT_ID = ROSTER.STUDENT_ID     AND TCSC.TEST_COMPLETION_STATUS = SIS.COMPLETION_STATUS     AND TCSC.TEST_COMPLETION_STATUS IN ('CO', 'IS', 'IC')     AND STU.ACTIVATION_STATUS = 'AC'     AND ROSTER.ACTIVATION_STATUS = 'AC'     AND ROSTER.VALIDATION_STATUS IN ('VA', 'PI')     AND SIS.VALIDATION_STATUS = 'VA'     AND IRS.ITEM_SET_ID = SIS.ITEM_SET_ID     AND IRS.ITEM_ID = IT.ITEM_ID     AND IRS.TEST_ROSTER_ID = ROSTER.TEST_ROSTER_ID     AND (DECODE(p.delivery_client_id,                 2,                 DECODE(IT.ANSWER_AREA,                        NULL,                        DECODE(DBMS_LOB.GETLENGTH(IRS.CONSTRUCTED_RESPONSE),                               NULL,                               0,                               DECODE(INSTR(CONSTRUCTED_RESPONSE, 'CDATA'),                                      0,                                      0,                                      1)),                        DECODE(IRS.AUDIO_URL, NULL, 0, 1)),                                  DECODE(DBMS_LOB.GETLENGTH(IRS.CONSTRUCTED_RESPONSE),                        NULL,                        0,                        DECODE(IT.ANSWER_AREA,                               NULL,                               DECODE(INSTR(CONSTRUCTED_RESPONSE, 'CDATA'),                                      0,                                      0,                                      1),                               1)))) = 1) AS studentCount, P.PARENT_PRODUCT_ID as parentProductId, nvl(p.delivery_client_id, 1) as deliveryClientId FROM ITEM_SET_ITEM     ISI, ITEM IT, ITEM_SET   ISET, ITEM_SET_ANCESTOR ISA, TEST_ADMIN TAD, product p WHERE ISI.ITEM_SET_ID = ISA.ITEM_SET_ID  AND ISA.ITEM_SET_TYPE = 'TD' AND ISA.ANCESTOR_ITEM_SET_ID = TAD.ITEM_SET_ID AND TAD.PRODUCT_ID = P.PRODUCT_ID AND TAD.TEST_ADMIN_ID = {testAdminId} AND IT.ITEM_ID = ISI.ITEM_ID AND (UPPER(IT.ITEM_TYPE) = 'CR' AND (IT.ANSWER_AREA IS NULL OR UPPER(IT.ANSWER_AREA) = UPPER('AudioItem'))) AND ISET.ITEM_SET_ID = ISI.ITEM_SET_ID ORDER BY ISI.ITEM_SET_ID, ISI.ITEM_SORT_ORDER",
             arrayMaxLength = 0, fetchSize=1000)
	 ScorableItem [] getAllScorableCRItemsForItemSet(Integer  testAdminId) throws SQLException;
	 
	//get response for AI item
	 @JdbcControl.SQL(statement = "select   isr.constructed_response as constructedResponse from item_response_cr isr where isr.test_roster_id = {testRosterId}  and isr.item_set_id = {deliverableItemId}  and isr.item_id = {itemId}",
			 arrayMaxLength = 0, fetchSize=1000)
	 Clob getAIItemResponse(Integer  testRosterId, Integer  deliverableItemId, String  itemId) throws SQLException;
	 
	 //get response for CR item
	 /*@JdbcControl.SQL(statement =" select fn_getcrresponse({testRosterId},{deliverableItemId},{itemId} ) from dual" )
	 String getCRItemResponse(Integer  testRosterId, Integer  deliverableItemId, String  itemId) throws SQLException;*/
	 
	//Get BMT AI item Url from 
	 @JdbcControl.SQL(statement = "select   isr.audio_url as url from item_response_cr isr where isr.test_roster_id = {testRosterId}  and isr.item_set_id = {deliverableItemId}  and isr.item_id = {itemId}")
	 String getAIItemUrl(Integer  testRosterId, Integer  deliverableItemId, String  itemId);
	 
	 
	 
	 //get rubric data rough 
	 @JdbcControl.SQL(statement =" select rubric_instruction ,itemsubtestid, itensetid  from table name dual")
	 String[] getRubricData(Integer itemSubtestId, Integer  itemSetId) throws SQLException;
	 
	 //get response for CR item
	 @JdbcControl.SQL(statement =" select constructed_response from  item_response_cr irscr where irscr.test_roster_id = {testRosterId} and irscr.item_set_id ={deliverableItemId} and irscr.item_id = {itemId}")
	 Clob getCRItemResponse(Integer testRosterId, Integer deliverableItemId, String itemId);
	 
	 // get TestAdminDetails
	 @JdbcControl.SQL(statement = "select  test_admin.TEST_ADMIN_ID as testAdminId,  test_admin.CUSTOMER_ID as customerId,  test_admin.TEST_ADMIN_NAME as testAdminName,  test_admin.PRODUCT_ID as productId,  test_admin.CREATOR_ORG_NODE_ID as creatorOrgNodeId,  node.org_node_name as creatorOrgNodeName,  test_admin.ACCESS_CODE as accessCode,  test_admin.LOCATION as location,  test_admin.LOGIN_START_DATE as loginStartDate,  test_admin.LOGIN_END_DATE as loginEndDate,  test_admin.DAILY_LOGIN_START_TIME as dailyLoginStartTime,  test_admin.DAILY_LOGIN_END_TIME as dailyLoginEndTime,  users.USER_NAME as createdBy,  test_admin.CREATED_DATE_TIME as createdDateTime,  test_admin.ACTIVATION_STATUS as activationStatus,  test_admin.ITEM_SET_ID as itemSetId,  test_admin.TEST_ADMIN_STATUS as testAdminStatus,  test_admin.SESSION_NUMBER as sessionNumber,  test_admin.TEST_ADMIN_TYPE as testAdminType,  test_admin.PREFERRED_FORM as preferredForm,  test_admin.FORM_ASSIGNMENT_METHOD as formAssignmentMethod,  test_admin.TIME_ZONE as timeZone,  test_admin.SHOW_STUDENT_FEEDBACK as showStudentFeedback,  test_admin.ENFORCE_TIME_LIMIT as enforceTimeLimit,  test_admin.ENFORCE_BREAK as enforceBreak,  test.item_Set_name as testName,  nvl(report.completed, 'F') as reportable,  ontc.override_form_assignment as overrideFormAssignmentMethod,  ontc.override_login_start_date as overrideLoginStartDate,  test_admin.test_catalog_id as testCatalogId,  test_admin.program_id as programId,  test_admin.random_distractor_status as isRandomize,  test_admin.test_session_data_exported as isTestSessionDataExported from  test_admin, users, item_set test,  org_node node,  org_node_test_catalog ontc,  (select  \t  \t\t  ros.test_admin_id,  \t\t\t  decode(count(distinct ros.test_roster_id), 0, 'F', 'T') as completed  \t  \tfrom  \t\t\t  test_roster ros,  \t\t\t  test_admin \t  \twhere  \t\t\t  ros.test_admin_id = test_admin.test_admin_id \t\t\t  and ros.test_completion_Status = 'CO' \t\t\t  and ros.validation_status = 'VA' \t\t\t  and test_admin.activation_status = 'AC'  and test_admin.test_admin_id = {testAdminId} \t\tgroup by  \t\t\t  ros.test_admin_id) report where  test_admin.activation_status = 'AC'  and ontc.item_set_id (+) = test_admin.item_set_id  and ontc.org_node_id (+) = test_admin.creator_org_node_id  and node.org_node_id = test_Admin.creator_org_node_id  and test.item_Set_id = test_admin.item_set_id \t\tand test_Admin.test_admin_id = report.test_admin_id (+)  and test_admin.created_by = users.user_id  and test_admin.test_admin_id = {testAdminId}")
	 TestSession getTestAdminDetails(Integer testAdminId) throws SQLException;
	 
	 //@JdbcControl.SQL(statement = "insert into item_response_points   (points,    item_response_points_seq_num,    datapoint_id,    condition_code_id,    created_by,    item_response_id) values   ({scorableItem.points}, 1,   {item_response_points.datapoint_id}),   {item_response_points.condition_code_id},   {item_response_points.created_by},   {item_response_points.item_response_id})")
	// TestSession saveScore(ScorableItem scorableItem, String item_response_points ) throws SQLException;
	 
	// get all response details for save
	 @JdbcControl.SQL(statement = "select itemId as itemId,  responseId as responseId, dp.datapoint_id as datapointId from (select itemId as itemId, responseId as responseId  from (select item_id as itemId, item_response.item_response_id as responseId  from item_response  where item_set_id = {itemSetIdTD} and test_roster_id = {testRosterId}   and item_id = {itemId} order by item_response.response_seq_num desc) item_res   where rownum = 1) irrs,  datapoint dp  where dp.item_id = irrs.itemId  ")
	 ResponsePoints[] getResponseForScore(String itemId, Integer itemSetIdTD, Integer testRosterId ) throws SQLException;
	
	// save or update all response 
	 @JdbcControl.SQL(statement = "MERGE INTO item_response_points responsePt USING (select {responsePoints.responseId}   as responseId,  {responsePoints.datapointId} as datapointId, {responsePoints.point}  as point, {responsePoints.createdBy}    as createdBy, {responsePoints.creattionDate}  as createdDate  from dual) temp ON (responsePt.item_response_id = temp.responseId and responsePt.datapoint_id = temp.datapointId) WHEN MATCHED THEN   UPDATE SET responsePt.points  = temp.point,  responsePt.created_by  = temp.createdBy,   responsePt.created_date_time = temp.createdDate WHEN NOT MATCHED THEN   INSERT  (responsePt.points,  responsePt.item_response_points_seq_num,      responsePt.datapoint_id,      responsePt.item_response_id,      responsePt.created_by,      responsePt.created_date_time)   VALUES     (temp.point,      1,      temp.datapointId,      temp.responseId,      temp.createdBy,      temp.createdDate)")
	 int  saveOrUpdateScore( ResponsePoints responsePoints  ) throws SQLException;
	 
	//Data details for rubric view
	 @JdbcControl.SQL(statement = "select rdata.item_id as itemId, rdata.score as score, rdata.rubric_description as rubricDescription, rdataEx.sample_response as sampleResponse, rdataEx.rubric_explanation as rubricExplanation from item_rubric_data rdata, item_rubric_exemplars rdataEx where rdata.item_id = rdataEx.item_id(+) and rdata.score = rdataEx.score(+) and rdata.item_id = {itemId} order by rdata.score asc")
	 RubricViewData[] getRubricDataDetails(String itemId) throws SQLException; 
	 
	  // Change for HandScoring: score by student
	 @JdbcControl.SQL(statement = "SELECT DECODE(COUNT(*), 0, 'CO', 'IN') recordno FROM (SELECT derivedResPoint.datapoint_id, derivedResPoint.item_response_id, COUNT(resPoint.datapoint_id) recordcount FROM (SELECT DISTINCT dp.datapoint_id     datapoint_id, ir.item_response_id item_response_id FROM item_response_cr irs, student_item_set_status siss, item_set_ancestor ita, item it, datapoint dp, item_response ir, (SELECT MAX(response_seq_num) seq_response_id, item_set_id, test_roster_id, item_id FROM item_response WHERE test_roster_id = {rosterId} GROUP BY item_set_id, test_roster_id, item_id) derivedrs, (SELECT p.delivery_client_id FROM product p, test_admin ta, test_roster tr WHERE ta.test_admin_id = tr.test_admin_id AND p.product_id = ta.product_id AND tr.test_roster_id = {rosterId}) prod WHERE siss.test_roster_id = {rosterId} AND ita.ancestor_item_set_id = {itemSetIDTC} AND ita.item_set_type = 'TD' AND siss.test_roster_id = irs.test_roster_id AND siss.completion_status IN ('CO', 'IS', 'IC') AND SISS.validation_status = 'VA' AND SISS.ABSENT <> 'Y' AND SISS.EXEMPTIONS <> 'Y' AND SISS.ITEM_SET_ID = ita.item_set_id AND ita.item_set_id = irs.item_set_id AND it.item_id = irs.item_id AND ((UPPER(it.item_type) = 'CR' AND (it.answer_area IS NULL OR UPPER(it.answer_area) = upper('AudioItem')))) AND dp.item_id = it.item_id AND (DECODE(prod.delivery_client_id, 2, DECODE(it.answer_area, NULL, DECODE(dbms_lob.getlength(irs.constructed_response), NULL, 0, DECODE(instr(irs.constructed_response, 'CDATA'), 0, 0, 1)), DECODE(irs.audio_url, NULL, 0, 1)), DECODE(dbms_lob.getlength(irs.constructed_response), NULL, 0, DECODE(it.answer_area, NULL, DECODE(INSTR(irs.constructed_response, 'CDATA'), 0, 0, 1), 1)))) = 1 AND derivedrs.item_set_id = ita.item_set_id AND derivedrs.test_roster_id = siss.test_roster_id AND derivedrs.item_id = it.item_id AND ir.response_seq_num = derivedrs.seq_response_id AND ir.item_set_id = ita.item_set_id AND ir.test_roster_id = siss.test_roster_id AND ir.item_id = it.item_id) derivedResPoint, item_response_points resPoint WHERE derivedResPoint.datapoint_id = resPoint.datapoint_id(+) AND derivedResPoint.item_response_id = resPoint.item_response_id(+) GROUP BY derivedResPoint.datapoint_id, derivedResPoint.item_response_id HAVING COUNT(resPoint.datapoint_id) = 0) derived")
     String getScoringStatus(Integer rosterId, Integer itemSetIDTC) throws SQLException;
	 
	 @JdbcControl.SQL(statement = "select irp.points as points   from item_response_points irp,   datapoint dp, (select item_response_id  from (select item_response_id, response_seq_num  from item_response ir  where ir.item_set_id = {itemSetIdTD}  and ir.test_roster_id = {testRosterId}  and item_id = {itemId}  order by response_seq_num desc) filtered_response  where rownum = 1) response where dp.datapoint_id = irp.datapoint_id   and response.item_response_id = irp.item_response_id  and dp.item_id = {itemId} and rownum = 1")
     Integer getScorePoints(Integer itemSetIdTD, String itemId, Integer testRosterId ) throws SQLException;
	 
     // Change for HandScoring: get all item with it's order  
	 @JdbcControl.SQL(statement = "select derived.item_id as itemId, rownum itemSetOrder  from (select isi.item_id, item_sort_order   from item_set_item isi, item item  where isi.item_id = item.item_id  and item.item_type <> 'NI'  and item.activation_status = 'AC'  and item_set_id = {itemSetIdTD}   order by item_sort_order) derived")
	 ScorableItem[] getAllScorableCRItemsForTD(Integer itemSetIdTD);
	 
	 //Get scoring status for the roster for the item set
	 @JdbcControl.SQL(statement = "select OAS_UTILS.GET_STD_CAREA_SCORING_STATUS({rosterId}, {itemSetIdTD}) from dual")
	 String getStatusForRosterAndTD(Integer rosterId, Integer itemSetIdTD);
	 
	 //Get BMT ITEM API URL for test admin
	 @JdbcControl.SQL(statement = "select resource_uri from customer_resource cr , test_admin ta where cr.resource_type_code = {bmtItemApiKey} and cr.customer_id = ta.customer_id and ta.test_admin_id = {testAdminId}")
	 String getBMTURLForItem(Integer testAdminId , String bmtItemApiKey) throws SQLException;
	 
}