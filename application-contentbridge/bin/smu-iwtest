#!/bin/ksh
# Source Migration Utility Script
# Created by Eddie Jun (edward.jun@ac.com)
# July 12, 1999
#
# This script assists in migrating files by creating a list of files to migrate.
# It then tars the list of files, preserving its relative directory structure,  
# and you may extract the tar file in the base destination directory.
#
# INPUTS: Migration list filename, Base location of source, Base destination location
# OUTPUT: Migration file list, log file, tarfile
#

# Load initial variables
VERSION="2.0"
MIGRATION_HOME="/export/migration"
INCOMING="$MIGRATION_HOME/incoming"
DAILY="$MIGRATION_HOME/daily"
TEMP_LOC="$MIGRATION_HOME/temp"
WL_HOME="/export/weblogic/6.1/config/oasuser"
INTERFACES_HOME="/export/cim"
EARLINK="lexington-all.ear"
LOG_DIR="$MIGRATION_HOME/logs"
CURRENTHOST=`hostname`
SMU_FILE="*.SMU"

#two_days_ago=`date --date="-7 days" +%Y%m%d`
today=`date +%Y%m%d`
current_time=`date +%H:%M`
      
initial_menu()
{
  clear
# display an option menu to the user
  echo "\n"
  cat <<EOF  

                 	IW Test Server TASKS
                             MAIN MENU

	1)  Extract files in $INCOMING

	2)  Extract files in $DAILY

	x) Exit

EOF
}


process_file()
{
#   status=`ls -l $1/temp_list | /usr/bin/awk '{print $5}'`
#   if [ ! "$status" = "0" ] ; then
    integer files
    files=`ls $1/*.SMU | wc -w`
    echo "\n> FILES listed as $1 : $files"
    if [ ! $files = 0 ] ; then
      cd $1
      ls -l *.tar | /usr/bin/awk '{print $9}' > $1/temp_list

      LOG_FILE="$CURRENTHOST-smu_$today.$current_time"
      exec 3> $LOG_DIR/$LOG_FILE
      exec 9< $1/temp_list
      print -u3 "Migration Log for $CURRENTHOST at $today, $current_time"
      file_eof=1
      while [ $file_eof -eq 1 ]
      do
	# read in a line from the source list
	read -u9 tarfile_string
	# if read is successful (not EOF)
	if [ $? -eq 0 ]; then
           if [ -r $1/$tarfile_string.SMU ] ; then
		SEARCH_FILE="FALSE"
		DEST_LOCATION="$IW_BASE"
		print -u3 "Processing file $1/$tarfile_string"

		case $tarfile_string in
		*test*)
		DEST_LOCATION="$WL_HOME"
		;;
		*interfaces*)  DEST_LOCATION="$INTERFACES_HOME"
		;;
		esac

		 if [ "$2" = "" ] ; then
			echo "Migrate $tarfile_string in $DEST_LOCATION? (y/n): \c" 
			read INPUT
			if [ "$INPUT" = "y" ] ; then
                           if [ -r $DEST_LOCATION/applications/$EARLINK ] ; then
                               \rm -f $WL_HOME/applications/$EARLINK
			   fi
			   #kill_wl
			   if [ "$DEST_LOCATION" = "$INTERFACES_HOME" ] ; then
				extract_tarfile
			   else
				echo "$DEST_LOCATION does not exist!"
				break
			   fi
			else 
				echo "\nSkipping Extraction...."
			fi
		  else
			   if [ "$DEST_LOCATION" = "$INTERFACES_HOME" ] ; then
				extract_tarfile
			   else
				echo "$DEST_LOCATION does not exist!"
				break
			   fi
			print -u3 "Finished migration of $tarfile_string in $DEST_LOCATION." 
		  fi
               fi
	else
		file_eof=0
    	fi  
    	done  
   else
      echo "\nThere are NO tar files in $1"
   fi

   if [ -r $1/temp_list ] ; then
        \rm -f $1/temp_list	
   fi
   if [ -r $LOG_DIR/$LOG_FILE ] ; then
	echo mail $Webmaster_Email < $LOG_DIR/$LOG_FILE
   fi
   if [ "$2" = "" ] ; then   
   echo "\nStep completed. Hit <Enter> to continue."
   read junk
   fi
}
extract_tarfile()
{
	cd $DEST_LOCATION
	tar xvf $INCOMING/$tarfile_string
	/usr/bin/chmod 755 *
	print -u3 "Finished extracting $tarfile_string in $DEST_LOCATION." 
	if [ ! -d $DAILY/$today ] ; then 
	   mkdir -p $DAILY/$today 
	fi 
	mv $INCOMING/$tarfile_string $DAILY/$today/
	echo "\nFile $tarfile_string moved to $DAILY/$today/\n"
	print -u3 "\nFile $tarfile_string moved to $DAILY/$today/\n"
	\rm -f $INCOMING/$tarfile_string.SMU
}

link_wl_file()
{
echo "tarfile is "
echo $tarfile_string
echo "that was the tarfile!"
	cd $DEST_LOCATION/applications
	\rm -f $EARLINK
	cd $DEST_LOCATION/etc
	\rm -f *.properties
	if [ ! -d $DAILY/$today ] ; then 
	   mkdir -p $DAILY/$today 
	fi 
	case $tarfile_string in
                *.tar)
		mkdir $INCOMING/extract
		cd $INCOMING/extract
		tar xvf $INCOMING/$tarfile_string
		dirname=`ls`
		echo "dirname is $dirname"
		mv * $DAILY/$today
		cd $INCOMING
		\rm -f $INCOMING/$tarfile_string
		\rm -R -f $INCOMING/extract	

		echo "linking"
		cd $DEST_LOCATION/applications
		ln -s $DAILY/$today/$dirname/lexington-ear.ear $EARLINK
		cd $DEST_LOCATION/etc
		ln -s $DAILY/$today/$dirname/lexington.properties lexington.properties
		ln -s $DAILY/$today/$dirname/error.properties error.properties
		ln -s $DAILY/$today/$dirname/jndi.properties jndi.properties
		\rm -f $INCOMING/$tarfile_string.SMU
	;;
	*)
	 	mv $INCOMING/$tarfile_string $DAILY/$today/
		echo "\nFile $tarfile_string moved to $DAILY/$today/\n"
		print -u3 "\nFile $tarfile_string moved to $DAILY/$today/\n"
		echo "Linking $EARLINK to $DAILY/$today/$tarfile_string"
		ln -s $DAILY/$today/$tarfile_string $EARLINK
		\rm -f $INCOMING/$tarfile_string.SMU 
	;;
	esac
}
	
smart_read() 
{
  echo
  if [ "$DEFAULT" != "" ]
  then
    echo "$PROMPT [$DEFAULT]: \c"
    read INPUT
    if [ "${INPUT}" = "" ]
    then
      INPUT=$DEFAULT
    fi
  else
    INPUT=""
    while [ "$INPUT" = "" ]
    do
      if [ "$EXAMPLE" != "" ]; then
        echo "$PROMPT [ex: $EXAMPLE] \c"
      else
        echo "$PROMPT \c"
      fi
      read INPUT
    done
  fi
}

deploy_content()
{
   cd $MIGRATION_HOME
   /usr/bin/ls -l | /usr/bin/grep 200 | /usr/bin/awk '{print $9}'
   PROMPT="Enter the date directory in YYYYMMDD format of where the content resides:"
   DEFAULT="$today"
   smart_read
   date_dir="$INPUT"
   echo "Date_dir: $date_dir" >> $LOGFILE
   if [ ! -d $MIGRATION_HOME/$date_dir ] ; then
	    echo "The directory $MIGRATION_HOME/$date_dir does not exist!"
	    echo "Exiting..."
	    exit
   fi
   
   cd $MIGRATION_HOME/$date_dir
   if [ ! -d $TEMP_LOC ] ; then
   	mkdir -p $TEMP_LOC
   fi
   
   echo "List of files: "
   /usr/bin/ls -l 
   /usr/bin/ls -l *.tar *.ear *.war | /usr/bin/awk '{print $9}' > $TEMP_LOC/temp_list
   exec 9< $TEMP_LOC/temp_list
   file_eof=1
   while [ $file_eof -eq 1 ]
   do
	# read in a line from the source list
	read -u9 tarfile_string
	# if read is successful (not EOF)
	if [ $? -eq 0 ]; then
		echo "Deploy $tarfile_string? (y/n): \c" 
		read INPUT
		if [ "$INPUT" = "y" ] ; then
	   
   	    case $tarfile_string in
	    *sc*.tar)
       		DEST_LOCATION="$STATIC_BASE"
                ;;
            *.ear)
                DEST_LOCATION="$TESTSERVER"
                  ;;
            *)   DEST_LOCATION="$TESTSERVER" ;;
            esac


		if [ "$DEST_LOCATION" = "$STATIC_BASE" ] ; then
			cd $DEST_LOCATION
			echo "\nExtracting files in $DEST_LOCATION..."
			tar xvf $MIGRATION_HOME/$date_dir/$tarfile_string >> $LOGFILE
			if [ ! -d $MIGRATION_HOME/$date_dir/migrated ] ; then
			    mkdir -p $MIGRATION_HOME/$date_dir/migrated
			fi
			mv $MIGRATION_HOME/$date_dir/$tarfile_string $MIGRATION_HOME/$date_dir/migrated

			echo "\nFile $tarfile_string moved to $MIGRATION_HOME/$date_dir/migrated.\n"

		fi
		if [ "$DEST_LOCATION" = "$TESTSERVER" ] ; then
			if [ -r $MIGRATION_HOME/$currentdate/lexington-app-$timestamp.ear ]; then
				cd $MIGRATION_HOME/$currentdate
				echo "Pushing lexington-app-$timestamp.ear to $TESTSERVER..."
				/opt/OBSDssh/bin/scp -i /export/home/oasuser/.ssh/id_rsa $MIGRATION_HOME/$currentdate/lexington-app-$timestamp.ear $TESTSERVER
				if [ ! -d $MIGRATION_HOME/$currentdate/migrated ] ; then
				    mkdir -p $MIGRATION_HOME/$currentdate/migrated
				fi
				mv $MIGRATION_HOME/$currentdate/lexington-app-$timestamp.ear $MIGRATION_HOME/$currentdate/migrated
				echo "\nlexington-app-$timestamp.ear file moved to: $MIGRATION_HOME/$currentdate/migrated/$currentdate/lexington-app-$timestamp.ear\n"
				echo "\nStep completed. Hit <Enter> to continue."
				read junk
			fi
		fi
	   fi
	else
		file_eof=0
    	fi  
    	
   done  
   if [ -r $TEMP_LOC/temp_list ] ; then
      \rm -f $TEMP_LOC/temp_list
   fi
   
   echo "\nStep completed. Hit <Enter> to continue."
   read junk
}


#begin Migration utility


if [ "$1" = "" ] ; then
  # loop until the user quits
  MENU_DONE=FALSE
  while [ "$MENU_DONE" = "FALSE" ]
  do
  initial_menu
  echo "Select menu option [1,2,x]: \c"
  read INPUT

  case $INPUT in

    1)	process_file $INCOMING
        #\rm -f /migration/now/$SMU_FILE
	   ;;
    2)  deploy_content
       	   ;;
    x|X)
         MENU_DONE=TRUE
         echo "Exiting Migration Utility.\n"
         ;;
    *)
       echo
       echo Invalid response!
       echo
      ;;
  esac
  done
else
   if [ -r $1/*.SMU ] ; then
   process_file $1 y
   fi
fi
