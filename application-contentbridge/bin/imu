#!/bin/ksh
# Interfaces Migration Utility Script
# Created by Chris Ulbrich (chris.p.ulbrich@accenture.com)
# May 2, 2003 
#
# This script assists in migrating files by creating a list of files to migrate.
# It then tars the list of files, preserving its relative directory structure,  
# and you may extract the tar file in the base destination directory.
#

# Load IP addresses 
vought="198.45.17.43" 
gloster="198.45.17.44"
convair="198.45.17.45"
sukhoi="198.45.17.46"
mikoyan="198.45.17.47" 
hawker="198.45.17.48"

hindmost="198.45.17.4"
atlantis="198.45.17.17"
pak="198.45.17.5"
kaizen="198.45.17.2"
junkers="198.45.17.35"
grumman="198.45.17.36"
dassault="198.45.17.33"
tupolev="198.45.17.34"

iwtest="168.116.31.222"
iwprod="168.116.31.217"

# Load initial variables

export LD_LIBRARY_PATH=/usr/openwin/lib:/usr/openwin/lib/X11:/usr/dt/lib:/opt/lib:/opt/lib/X11:/oracle/product/9.0.1/lib:/export/$SP_LOC/6.1/lib/solaris:/export/$SP_LOC/6.1/lib:/opt/hpnpl/lib:/export/loadrunner/bin
JAVA_HOME=/export/weblogic/jdk131

VERSION="0.1"
IAM=`/usr/xpg4/bin/id -unr`

INTERFACES_ROOT="interfacesroot"
INTERFACES_BUILD="/tmp/interfaces"
MIGRATION_DIR="/export/migration/interfaces"
CIM_DIR="/export/cim/instance"
XSLT_DIR="content/publishing"
CIM_JAR_DIR="build"
PUBLISHING_DIR="content/publishing"


IWTESTSERVER="$iwtest"
IWPRODSERVER="$iwprod"
TESTSERVER="$atlantis"
TRAINSERVER="$atlantis"
STAGINGSERVER="$kaizen"
CONTENTQASERVER="$kaizen"
PRODSERVERS="$vought $gloster $convair $sukhoi $mikoyan $hawker"

ACTION_LOG=""

initialcurrentdate=`date +%Y%m%d`
initialcurrenttime=`date +%H%M%S`

initial_menu()
{
  clear
# display an option menu to the user
echo "Actions: $ACTION_LOG"
echo "-----------------------------------------------------------------------------------------------------------------------------"
  echo "\n"


echo "                  Interfaces Migration Utility V$VERSION"
echo "                  $codebase MAIN MENU"
echo "\n"
echo "                  Timestamp: $timestamp"
echo "		  SRC_PARENT: $SRC_PARENT"
cat << EOF

        1)  Update source code

        2)  Tag Current Working Directory.

	3)  Deploy publishing cim

	4)  Deploy cim jar

	5)  Deploy XSLT

	x)  Exit

EOF
}


select_env()
{


        DEFAULT="1"
        cat << EOF



        Environment Menu

        1)  DEV

	2)  TEST

	3)  STAGING

EOF
        if [ "$ALLOWED_PUSH_TO_PROD" = "$codebase" ] ; then
          echo "        4)  CONTENTQA"
          echo ""
          echo "        5)  PRODUCTION"
          echo ""
        fi




        PROMPT="Please choose an environment now"
        smart_read




	case $INPUT in
                1)
			ENV_TO_PUSH="dev"
                        ;;
                2)
			ENV_TO_PUSH="test"
			IWSERVERS=$IWTESTSERVER
                        APPSERVERS=$TESTSERVER
                        ;;
                3)
			ENV_TO_PUSH="staging"
			IWSERVERS=$IWTESTSERVER
                        APPSERVERS=$STAGINGSERVER
                        ;;
                4)
			ENV_TO_PUSH="contentqa"
			IWSERVERS=$IWTESTSERVER
                        APPSERVERS=$STAGINGSERVER
                        ;;
                5)
			ENV_TO_PUSH="production"
			IWSERVERS=$IWPRODSERVER
                        APPSERVERS=$PRODSERVERS
                        ;;
		*)	
	 	        echo
                        echo Invalid response!
                        echo
                        ;;	
		esac;

        MIGRATION_DIRECTORY="$MIGRATION_DIR/$buildtag"
        TEMP_LOC="$MIGRATION_DIRECTORY/temp"
        NEW_ACTION_LOG="SELECTED $ENV_TO_PUSH ENVIRONMENT"
        ACTION_LOG=$NEW_ACTION_LOG
        TEMPFILE="$TEMP_LOC/temp_list"
        LOGFILE="$TEMP_LOC/migration.log"

}

select_interfaces_codebase()
{
#        clear


	DEFAULT="1"
        cat << EOF
        Codebase Menu

        1)  ATSR3

EOF


 #       PROMPT="Please choose a codebase now"
 #       smart_read



# Hard-coded value for now... once multiple branches are used, input will be selected by user
INPUT="1"



case $INPUT in
                1)
                        codebase="trunk"
                        buildtag="trunk"
                        ;;
                *)
                        echo "Invalid response...exiting"
                        exit 1
                        ;;
                esac;

        MIGRATION_DIRECTORY="$MIGRATION_DIR/$buildtag"
        TEMP_LOC="$MIGRATION_DIRECTORY/temp"
        SRC_PARENT=$HOME/$INTERFACES_ROOT/$codebase
        NEW_ACTION_LOG="SELECTED $codebase CODEBASE"
        ACTION_LOG=$NEW_ACTION_LOG
        TEMPFILE="$TEMP_LOC/temp_list"
        LOGFILE="$TEMP_LOC/migration.log"
}


select_timestamp()
{
	clear
	# allow the user to select a time stamp from the previous builds
	echo "\n"
	cat << EOF
	Timestamp Menu
	
EOF

	cd $SRC_PARENT 
        testfile="content/publishing/FOP_Interface.xsl"

        /usr/local/bin/cvs log $testfile | grep build-$buildtag-2003 | awk '{ print $1 }' | sed s/://

	PROMPT="Please choose a date value now"
	DEFAULT=$initialcurrentdate
	smart_read
	currentdate=$INPUT
	PROMPT="Please choose a time value now"
	DEFAULT=$initialcurrenttime
	smart_read
	currenttime=$INPUT
	timestamp="$buildtag-$currentdate-$currenttime"
	NEW_ACTION_LOG="$ACTION_LOG, SELECT TIMESTAMP"
	ACTION_LOG=$NEW_ACTION_LOG
}


update_code()
{
  PROMPT="Type 1 to update code based on a specific tag, or 2 to update the entire tree (appropriate branch tag will be used)"
  DEFAULT="1"
  smart_read

  if [ "$INPUT" = "1" ] ; then
	TAG_TO_UPDATE="build-$timestamp"
        PROMPT="Enter the tag for the code you wish to update:" 
	DEFAULT=$TAG_TO_UPDATE
        smart_read      
        PROMPT="Update code with tag '$TAG_TO_UPDATE'?"
        DEFAULT="y"
        smart_read
        if [ "$INPUT" = "y" ] ; then
                /usr/local/bin/cvs update -r $TAG_TO_UPDATE
	fi
  else 
	if [ "$codebase" = "trunk" ] ; then
	  PROMPT="Update entire tree from trunk?"
	  DEFAULT="y"
 	  smart_read
	  if [ "$INPUT" = "y" ] ; then
		/usr/local/bin/cvs update -P -d
	  fi
  	else	
	  PROMPT="Update entire tree for branch $codebase?"
	  DEFAULT="y"
	  smart_read
	  if [ "$INPUT" = "y" ] ; then
 		/usr/local/bin/cvs update -r $codebase -P -d	
	  fi
	fi
  fi
        echo "\nStep completed. Hit <Enter> to continue. "
        read junk

        NEW_ACTION_LOG="$ACTION_LOG, UPDATE CODE"
        ACTION_LOG=$NEW_ACTION_LOG
}


tag_current_version()
{
        cd $SRC_PARENT
        PROMPT="Tag current deployment in $SRC_PARENT?"
        DEFAULT="y"
        smart_read
        if [ "$INPUT" != "y" ] ; then
            return
        fi

        echo "Tagging working directory $SRC_PARENT as build-$timestamp"
        /usr/local/bin/cvs tag build-$timestamp
        PROMPT="ENTER to return to menu"
        smart_read
        NEW_ACTION_LOG="$ACTION_LOG, TAG CURRENT VERSION"
        ACTION_LOG=$NEW_ACTION_LOG
}


deploy_publishing()
{

	select_env 

	echo "deploying publishing to $ENV_TO_PUSH"

	case $ENV_TO_PUSH in
            dev)
	         deploy_publishing_dev
                 ;;
            test|staging|production)
		 deploy_env publishing $APPSERVERS
                 ;;
            *)
                 echo "Invalid response...exiting"
                 exit 1
                 ;;
        esac;

}


deploy_xslt()
{

        select_env

        echo "deploying xslt to $ENV_TO_PUSH"

        case $ENV_TO_PUSH in
            dev)
                 deploy_xslt_dev
                 ;;
            test|staging|production)
		 deploy_env xslt $IWSERVERS
                 ;;
            *)
                 echo "Invalid response...exiting"
                 exit 1
                 ;;
        esac;

}


deploy_cim_jar()
{

        select_env

        echo "deploying cim jar to $ENV_TO_PUSH"

        case $ENV_TO_PUSH in
            dev)
                 deploy_cim_jar_dev
                 ;;
            test|staging|production)
		 deploy_env cim_jar $IWSERVERS
                 ;;
            *)
                 echo "Invalid response...exiting"
                 exit 1
                 ;;
        esac;

}


# deploys $codebase to development env
deploy_publishing_dev()
{
	cd $INTERFACES_BUILD
        \rm -fR *
	echo "SRC_PARENT is $SRC_PARENT"
	echo "cd $SRC_PARENT/content/publishing"
 	cd $SRC_PARENT/content/publishing
	echo "tar cvfX $INTERFACES_BUILD/publishing.tar $SRC_PARENT/../exclude *" 
	tar cvfX $INTERFACES_BUILD/publishing.tar $SRC_PARENT/../exclude fopit fopitak hyphenspace.pl FOP_*.xsl common.xsl

        move_to_migration publishing
  
        echo "Deployed publishing source to dev.  If you need to verify and test this build, please do so now before tagging."

        echo "Hit <Enter> to continue."
        read junk

        NEW_ACTION_LOG="$ACTION_LOG, DEPLOY PUBLISHING TO DEV"
        ACTION_LOG=$NEW_ACTION_LOG
}


# deploys $codebase to development env
deploy_xslt_dev()
{
        cd $INTERFACES_BUILD
        \rm -fR *
        echo "SRC_PARENT is $SRC_PARENT"
        echo "cd $SRC_PARENT/$XSLT_DIR"
        cd $SRC_PARENT/$XSLT_DIR
        echo "tar cvfX $INTERFACES_BUILD/xslt.tar $SRC_PARENT/../exclude *"
        tar cvfX $INTERFACES_BUILD/xslt.tar $SRC_PARENT/../exclude fopit fopitak hyphenspace.pl FOP_*.xsl common.xsl

        move_to_migration xslt
 
        echo "Deployed xslt source to dev.  If you need to verify and test this build, please do so now before tagging."

        echo "Hit <Enter> to continue."
        read junk

        NEW_ACTION_LOG="$ACTION_LOG, DEPLOY XSLT TO DEV"
        ACTION_LOG=$NEW_ACTION_LOG
}



# deploys $codebase to development env
deploy_cim_jar_dev()
{

        cd $INTERFACES_BUILD
        \rm -fR *
	ant build_import_utils
        echo "SRC_PARENT is $SRC_PARENT"
        echo "cd $SRC_PARENT/$CIM_JAR_DIR"
        cd $SRC_PARENT/$CIM_JAR_DIR

    	if [ -r $SRC_PARENT/$CIM_JAR_DIR/XML2DBImport.jar ] ; then
        	echo "tar cvfX $INTERFACES_BUILD/cim_jar.tar $SRC_PARENT/../exclude *"
        	tar cvfX $INTERFACES_BUILD/cim_jar.tar $SRC_PARENT/../exclude XML2DBImport*
    	else 
		echo "cim jar doesn't exist!"
		exit
	fi

        move_to_migration cim_jar

        echo "Deployed cim_jar source to dev.  If you need to verify and test this build, please do so now before tagging."

        echo "Hit <Enter> to continue."
        read junk

        NEW_ACTION_LOG="$ACTION_LOG, DEPLOY CIM_JAR TO DEV"
        ACTION_LOG=$NEW_ACTION_LOG
}





move_to_migration()
{
        if [ ! -r $INTERFACES_BUILD/$1.tar ]; then

            echo "The file $INTERFACES_BUILD/$1.tar does not exist!"
            echo "Exiting..."
            exit
        fi

        if [ ! -d $MIGRATION_DIRECTORY/$currentdate ] ; then
            mkdir -p $MIGRATION_DIRECTORY/$currentdate
            chmod -R 775 $MIGRATION_DIRECTORY/$currentdate
        fi

        echo "moving $INTERFACES_BUILD/$1.tar to $MIGRATION_DIRECTORY/$currentdate..."
        if [ -r $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.ear ] ; then
           echo "WARNING:  Possible linking error!"
        fi
        mv $INTERFACES_BUILD/$1.tar $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar

	cd $CIM_DIR
	
	echo "Untarring $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar to $CIM_DIR"
	tar xvf $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar
	
}


deploy_env()
{
                  if [ -r $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar ]; then

                        cd $MIGRATION_DIRECTORY/$date_dir
                        for server in $2;
                        do
                        echo "Pushing $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar to $server..."
                        touch $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar.IMU
                        /usr/mount/bin/scp $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar $server:/export/migration/incoming
                        /usr/mount/bin/scp $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar.IMU $server:/export/migration/incoming
                        \rm -f $MIGRATION_DIRECTORY/$currentdate/$1-$timestamp.tar.IMU
                        done
                else
                        echo "Tarfile doesn't exist!\n$1 not deployed!"
                fi

                echo "\nStep completed. Hit <Enter> to continue. "
                read junk


NEW_ACTION_LOG="$ACTION_LOG, DEPLOY $1"
ACTION_LOG=$NEW_ACTION_LOG
}


verify_user()
{
	case $IAM in
		oasuser)
		;;
		*)
			echo "You must be oasuser to run this script."
			echo "Exiting..."	
			exit 1
		;;
	esac
}

smart_read() 
{
  echo
  if [ "$DEFAULT" != "" ]
  then
    echo "$PROMPT [$DEFAULT]: \c"
    read INPUT
    if [ "${INPUT}" = "" ]
    then
      INPUT=$DEFAULT
    fi
  else
    INPUT=""
    while [ "$INPUT" = "" ]
    do
      if [ "$EXAMPLE" != "" ]; then
        echo "$PROMPT (ex: $EXAMPLE) \c"
      else
        echo "$PROMPT \c"
      fi
      read INPUT
    done
  fi
}

prompt_password()
{
	clear
	PROMPT="Please enter your password:"
	smart_read

	case $INPUT in 
		welcome)
		;;
		prodpassword)
		ALLOWED_PUSH_TO_PROD="trunk"
		;;
		*)
			echo "Invalid Password, Exiting..."
			exit 1;
		;;
	esac
}






#begin Migration utility

verify_user
prompt_password

select_interfaces_codebase
select_timestamp interfaces

MAIN_MENU_DONE=FALSE
while [ "$MAIN_MENU_DONE" = "FALSE" ]
     do
         initial_menu
         echo "Select menu option : \c"
         read INPUT
         case $INPUT in
         1)   update_code
                 ;;
         2)   tag_current_version
                 ;;
	 3)   deploy_publishing
		 ;;
	 4)   deploy_cim_jar
		 ;;
	 5)   deploy_xslt
		 ;;
       x|X)
                 echo "Exiting....\n"
                 exit
                 ;;
         *)
                 echo
                 echo Invalid response!
                 echo
                 ;;
         esac
done
