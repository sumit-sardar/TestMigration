#!/appl/TeamSite/iw-home/iw-perl/bin/iwperl

#------------------------------------------------------------------------------
# Usage:
#
# tw_deploy.ipl [STAGING|PRODUCTION] <arguments for com.ctb.teamsite.TeamsiteAdapter>
#------------------------------------------------------------------------------

use lib "/export/home/$iw_user/content/teamsite/iw-home/iw-perl/lib/perl5/site_perl/5.005";

use TeamSite::WFtask;
use TeamSite::Config;
use File::Copy;
use File::Basename;
use Time::Local;

my $timeStamp = &getTimeStamp();
print "\n\n Starting deployment perl script - $timeStamp\n";
for (@ARGV) { printf "%d %s\n", $i++, $_};
my $environment=$ARGV[0];
my $jobid = $ARGV[1];
my $taskid = $ARGV[2];

umask(022);
my $workingdir = "/appl/oas1/".$jobid;
if ($environment eq "PRODUCTION") {
   $workingdir = "/appl/publishing/production/outbound/".$jobid;
}
my $java_version = `which java`;
my $fileName = "/tmp/cron_deploy_log.txt";

open(OUTPUT, ">> $fileName")
    || warn("Cannot open $fileName for writing: $!\n");
print OUTPUT "$timeStamp: $0 - $environment - $jobid - $taskid - $workingdir - $java_version\n";
close(OUTPUT);

#--------------------------#
# function: getTimestamp() #
#--------------------------#---------------------------------------------------#
# This function gets the current date and time, formats it as                  #
#                      mm/dd/yyyy - hh:mm:ss                                   #
# and returns it to the calling function.                                      #
#------------------------------------------------------------------------------#

sub getTimeStamp {

    my ($sec,$min,$hr,$day,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    $mon = sprintf("%02d",($mon + 1));
    $day = sprintf("%02d",$day);
    $hr = sprintf("%02d",$hr);
    $min = sprintf("%02d",$min);
    $sec = sprintf("%02d",$sec);
    my $ddyear = substr($year,1);
    my $modYear = 1900 + $year;
    my $timestamp = "$mon/$day/$modYear - $hr:$min:$sec";
    return($timestamp);

}

#------------------------------------------------------------------------------#
# End of getTimeStamp() function.                                              #
#------------------------------------------------------------------------------#


`rm -r $workingdir` if (-e $workingdir);
mkdir ($workingdir, 0777) || die "$date: could not create $workingdir";
chmod (0775,$workingdir) || die "$date: could not chmod $workingdir";

#Call the CCS_CIM tool for an importandmapitems to OAS
print "Entering Java Application\n";
chdir ("/export/cim/ccs") || die "$date: could not change directory to /export/cim/ccs";
my $error_flag = 0;
print "\n\n Changed Directory to ccs\n";
my $cmd = 'LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"; export LD_LIBRARY_PATH; ' . "java -cp /export/cim/ccs/lib/ccs.jar com.ctb.common.teamsite.TeamSiteAdapter importandmapitems @ARGV";
print "pwd is " . `pwd`;
print "Command is $cmd";

if ($environment ne "PRODUCTION") {
	if (system("$cmd") != 0) {
		print "Content import failed!\n";
		$error_flag = 1;
	}
} else {
	`echo Creating deployToProduction for $workingdir >> $logfile`;
	if (!open(DTP, "> $workingdir/deployToProduction")) {
		print "Couldn't open $workingdir/deployToProduction\n";
		$error_flag = 1;
	}
	print DTP "#!/bin/sh\n";
	print DTP "cd /export/cim/ccs\n";
	print DTP $cmd;
	print DTP "\n";
	close DTP;
	if (!chmod (0775, "$workingdir/deployToProduction")) {
		print "Couldn't chmod $workingdir/deployToProduction\n";
		$error_flag = 1;
	}
}

`chown -R iwuser:oasgrp $workingdir`;
if ($? != 0) {
	print "Couldn't chown $workingdir\n";
	$error_flag = 1;
}
print "Exiting Java Application\n";

# Finally we need to call back to the workflow and it know we are done
my $task = new TeamSite::WFtask($taskid);
$task->CallBack(0, "Deployed files.");
print "Calling back to Teamsite, finished with external task\n";
exit 0;
