#!/appl/TeamSite/iw-home/iw-perl/bin/iwperl

use TeamSite::CGI_lite;
use TeamSite::Config;
use TeamSite::WFtask;
use File::Basename;
use File::Copy;
use CTB::RegEx;
use CTB::CIM;
use CTB::XML;
use TeamSite::WFworkflow;
$| = 1;


# Set Some variables
my $iwhome = TeamSite::Config::iwgethome();
my $hostname = TeamSite::Config::hostname();
my $logfile = "/appl/tmp/genEditorFiles.log";
my $job_dir;
my %items;
my $CCS_CMD = "bin/ccs";
my $ROOT_DIR = "/export/cim/ap_preview/tomcat/webapps/ROOT/Jobs";
my $jobID;

open(LOG, ">>$logfile");
# Get the information from the form
$cgi = TeamSite::CGI_lite->new();
$cgi->parse_data();

  foreach $name (keys %{$cgi->{form}})
  {
  	if($name eq "JobID") {
  	  $jobID = $cgi->{form}{$name};
        }
  }

#=========================================
# Main Program Area
#=========================================
&CheckDirs($jobID);

#=========================================
# End of Main Section
#=========================================

#=========================================
# Create a directory for the job
#=========================================
sub CheckDirs {
	# the following is for Windows
	my $job = $_[0];
	$job_dir = $ROOT_DIR . "/" . $job;
	`rm -r $job_dir` if (-e $job_dir);
	mkdir ($job_dir, 0777) || die "can't create $job_dir\n";
	chmod(0775,$job_dir);
	mkdir("$job_dir/data",0777);
	chmod(0775,"$job_dir/data");
	my $ocs_dir = "/appl/publishing/cim/ccs";
	# `chdir $ocs_dir` || die "cant change $ocs_dir";
	CORE::chdir($ocs_dir) || die "cant change to $ocs_dir";

	&CreateFiles($job,$job_dir);
}

#=========================================
# Create the files for the job
#=========================================
sub CreateFiles {
	my $job = $_[0];
	my $dir = $_[1];
	
	
	$workflow = new TeamSite::WFworkflow($job);
	$tasks = $workflow->GetTasks();
	
	foreach my $taskid (@$tasks) {
		$id = $taskid->GetId();
		last if ($taskid->GetState() eq "active");
		# $id = $taskid->GetId();
		# push(@ids,$id);
	}
	
	my $task = new TeamSite::WFtask($id);
	@files = $task->GetFiles();
	my $area = $task->GetArea();
	
	#=============================================
	# Parse Files
	#=============================================
	foreach $file (@files) {
	        # print "FILE: $file\n";
		next unless ($file =~ /xml$/);
		
		my $fullpath_in = "$area/$file";
		
		###
		#
		#  This is where Jen happens
		#
		###
	
	        $file =~ /([^\/]*)\.xml/;
	        my $ocs_dir = "/appl/publishing/cim/ccs";
	        CORE::chdir($ocs_dir) || die "cant change to $ocs_dir";
				
			        $cmd = $CCS_CMD .
			               " generatemediaforeditorreview infile="
			               . $fullpath_in .
			               " rootdirectory="
			               . $ROOT_DIR . 
			               " directory=" 
			               . $job .
			               " pdfoutfile="
			               . $1 . 
			               " flashoutfile="
			               . $1;
	        $pwd = `pwd`;
	        $id = `id`;
	        print LOG "PWD: $pwd\nID: $id\n";
	        open(PIPE, "$cmd 2>&1 |");
			my(@text) = <PIPE>;
	        close(PIPE);
	        # my @result = `$cmd`;
	        print LOG join(' ', @text); 
	        print LOG "\n\n\n JEN COMMAND $cmd \n\n\n";
	 }       
	       
#	
#		my $date = `date`;
#		chomp $date;
#		
#		my ($full_doc) = CTB::RegEx::full_doc("$area/$file");
#		#print LOG "\n\n FULL DOC: $full_doc\n";
#		my $gi = CTB::RegEx::doc_type($full_doc);
#		#print LOG "$date GI: $gi\n";
#		my $grade = CTB::RegEx::get_grade($full_doc);
#		#print LOG "$date GRADE: $grade\n";
#	
#	#
#		#
#		#  After Jen is done this stuff can go!
#		#
#		#
#	
#		$basefile=basename($file);
#		my $outfile = "$dir/data"."/"."FullDoc_$basefile";
#	
#		#=====================================
#		# Create SubTest and individual Items
#		#=====================================
#		open(OUT,">$outfile");
#		
#		# If the first element is a Assessment
#		if ($gi eq 'Assessment') {
#			$full_doc =~ s/"\.\.\/images/"iwts:\/images/igm;
#			$full_doc =~ s/iwts:/$area/gm;
#			print OUT "<?xml version=\"1.0\"?>$full_doc";
#		        close OUT;
#		        
#		        ($gi, $grade, %items) = CTB::XML::get_items($file, $area);
#			
#			my ($id, $item);
#			
#			while ( ($id,$item) = each %items ) {
#				my $item_file = "$dir/data"."/"."$id.xml";
#				open(ITEM, ">$item_file");
#				print ITEM "<?xml version=\"1.0\"?>";
#
#				print ITEM "$item";
#				print LOG "\n\n\n$id => $item\n\n\n";
#				close ITEM;
#			}
#		}
#		# If the first element is a SubTest
#		elsif ($gi eq "SubTest") {
#			$full_doc =~ s/"\.\.\/images/"iwts:\/images/igm;
#                        $full_doc =~ s/iwts:/$area/gm;
#		        print OUT "<?xml version=\"1.0\"?><Assessment ID=\"EditorPreview\" ProductID=\"1\" Grade=\"$grade\" Title=\"EditorPreview\"><TitleImage Src=\"here\"\/>$full_doc\n";
#			print OUT "</Assessment>";
#			close OUT;
#			
#		        ($gi, $grade, %items) = CTB::XML::get_items($file, $area);
#						
#			my ($id, $item);
#
#			#while ( ($id,$item) = each %items ) {
#			#	my $item_file = "$dir/data"."/"."$id.xml";
#			#	open(ITEM, ">$item_file");
#			#	print ITEM "<?xml version=\"1.0\"?>";
#
#			#	print ITEM "$item";
#				# print "\n\n\n$id => $item\n\n\n";
#			#	close ITEM;
#			#}
#		}
#		# If the first element is a ItemSet
#		elsif ($gi eq 'ItemSet') {
#			$full_doc =~ s/"\.\.\/images/"iwts:\/images/igm;
#                        $full_doc =~ s/iwts:/$area/gm;
#                        print OUT "<?xml version=\"1.0\"?><Assessment ID=\"EditorPreview\" ProductID=\"1\" Grade=\"$grade\" Title=\"EditorPreview\"><TitleImage Src=\"here\"\/><SubTest ID=\"EditorPreview\" ProductID=\"1\" ContentArea=\"EditorPreview\" Grade=\"$grade\" Title=\"Preview for Editor\">$full_doc\n";
#		        print OUT "</SubTest></Assessment>";
#			close OUT;
#
#		        ($gi, $grade, %items) = CTB::XML::get_items($file, $area);
#						
#			my ($id, $item);
#
#			#while ( ($id,$item) = each %items ) {
#			#	my $item_file = "$dir/data"."/"."$id.xml";
#			#	open(ITEM, ">$item_file");
#			#	print ITEM "<?xml version=\"1.0\"?>";
#
#			#	print ITEM "$item";
#			#	print LOG "\n\n\n$id => $item\n\n\n";
#				
#			#	close ITEM;
#			#}
#		}
#	}
#	#`cp /appl/publishing/cim/R2_Flash_UI.dtd .#`;
#	#`cp /appl/publishing/cim/*.ent .#`;
#	#`cp /appl/publishing/cim/FOP_Interface.xsl .#`;
#	#`cp /appl/publishing/cim/FOP_Interface_AK.xsl .#`;
#	#`cp /appl/publishing/cim/cab_iak.swt .#`;
#	#`cp /appl/publishing/cim/cab_ak_subtest.swt .#`;
#
#	#
#	#
#	#  End of removing 
#	#
#	#
#	
	&PrintHTML($job,$dir);	
} # end of sub


#=========================================
# Print HTML
#=========================================
sub PrintHTML {

#
#
#  More house cleaning 
#
#

my $job = $_[0];
my $dir = $_[1];

opendir(DIR,"$dir/data");
@xmlfiles = readdir(DIR);
closedir(DIR);
`mv $dir/data/*.xml $dir/`;
close LOG;

#foreach $xml (@xmlfiles) {
#	next if ($xml eq "." or $xml eq "..");
#        open(LOG, ">>$logfile");
#	my $itemID = $xml;
#	$itemID =~ s/\.xml//mg;
#	print LOG "DOING ITEM: $itemID\n";
#	
#	if ( $xml =~ m/FullDoc_/) {
#		&CTB::RegEx::parse4fop($xml);
#		copy($xml, "compdisp.xml");
#	        &CTB::RegEx::parse4jgen("compdisp.xml");
#		my @jgen_ret = &CTB::CIM::fulldoc_jgen("$itemID.swf");
#		print LOG "\nJGEN RESULT: $jgen_ret[0]  $jgen_ret[1]\n";
#		my @fop_ret = &CTB::CIM::run_fop("$xml");
#		print LOG "\nFOP RESULT: $fop_ret[0]  $fop_ret[1]\n";
#		# `/appl/publishing/cim/fopit $dir/data/$xml FOP_Interface.xsl`;
#		
#	} 
#	#else {
#	#	&CTB::RegEx::parse4fop($xml);
#	#        copy($xml, "compdisp.xml");
#	#        &CTB::RegEx::parse4jgen("compdisp.xml");
#	#	my @jgen_ret = &CTB::CIM::run_jgen("$itemID.swf");
#	#	print LOG "\nJGEN RESULT: $jgen_ret[0]  $jgen_ret[1]\n";
#	#	my @fop_ret = &CTB::CIM::run_fop("$xml");
#	#	print LOG "\nFOP RESULT: $fop_ret[0]  $fop_ret[1]\n";
#	#	#print "JGEN: /appl/publishing/jgenerator/2.1/bin/jgenerate -log4j -swf $itemID.swf cab_iak.swt\n";
#		#`/appl/publishing/jgenerator/2.1/bin/jgenerate -log4j -swf $itemID.swf cab_iak.swt`;
#		#print "FOP: /appl/publishing/cim/fopit $dir/data/$xml FOP_Interface.xsl/n";
#		#`/appl/publishing/cim/fopit $dir/data/$xml FOP_Interface.xsl`;
#		
#	#}	
#        close LOG;
#}

#open(LOG, ">>$logfile");
## Clean of the directory
#`rm *.swt *.xsl *.temp *.dtd`;
# chdir $dir;
# unlink <*.ps>;
# unlink <*.fo>;
# unlink <*.ent>;
# unlink <*.tmp>;
# unlink <*.temp>;
# #chdir "data";
# #unlink <*.ps>;
# #unlink <*.fo>;
# #unlink <*.ent>;
# #unlink <*.tmp>;
# 
my $mode = 0777; chmod $mode, <*.*>;
 chmod $mode, $logfile;

#
#
# End of Housecleaning 
#
#

print<<"END";
Content-type: text/html

<html>
<head>
  <title>File(s) Created!</title>
</head>
<body bgcolor='#cccccc'>
<center>
<img src='/iw/webdesk/images/ts_logo.gif' align='center'>
<BR>
<H2>The file(s) have been created.</H2>
<p>
END
print "<p>Please visit <a href=\"http://$hostname:8000/Jobs/$job\">http://$hostname:8000/Jobs/$job</a></p><br>";
print "<a href=\"javascript:close()\"><img src='/iw/webdesk/images/en/btn_close.gif' align='center' border=0></A></center>";
print "</body>";
print "</html>";
}
