#!/appl/TeamSite/iw-home/iw-perl/bin/iwperl

#------------------------------------------------------------------------------
# Copyright 2002 Interwoven, Inc.   All rights reserved.
#
# Author    Bobby Magee <bobby@interwoven.com>
#
# File      ctb_deploy.ipl
# Use       Used to Test Deploying content out the the CTB servers
#
#           ctb_deploy.ipl [STAGING|PRODUCTION]
#
#------------------------------------------------------------------------------

use TeamSite::WFtask;
use TeamSite::Config;
use File::Copy;
use Net::SMTP;
use File::Basename;
use Time::Local;
use CTB::OD;
use CTB::RegEx;
use CTB::XML;
use CTB::Email;
use CTB::CIM;


#we need to set some environment variables for Oracle
$ENV{'ORACLE32_LIB'}='/oracle/oracle32/lib';
$ENV{'ORACLE_HOME'}='/oracle/product/9.2.0.1';
$ENV{'ORACLE_BASE'}='/oracle';
$ENV{'ORACLE_LIB'}=$ENV{'ORACLE32_LIB'};
$ENV{'LD_LIBRARY_PATH'}="$ENV{'ORACLE32_LIB'}:/usr/openwin/lib:/usr/openwin/lib/x11:/usr/dt/lib:/opt/lib:/opt/libx11:/oracle/product/9.2.0.1/lib";

# Now we need to define some variable for our script
$time = timelocal($seconds, $minutes, $hours, (localtime)[3,4,5]);
my $iwhome = TeamSite::Config::iwgethome();
my $odhome = "/appl/OpenDeploy/OpenDeployNG";
my $area = $ARGV[3];
my $logfile = "/appl/oas1/ctb_deploy.log";
my $task = new TeamSite::WFtask($ARGV[2]);
my $jobid = $task->GetWorkflowId();
my @files;
my @item_id;
my $message;
my $retval = 0;
my $odcmdfile = $iwhome . "/tmp/odcmd.txt";
my $cim_ret;
my @images;
my %items;
my ($k, $v);
my $mode = 0755;
my $email_log = "";
my $error_flag = 0;
my $always_send_email = 1;
my $email_successful_items = 1;

my $date = localtime();

my $tmp = "/appl"; # This needs to be changed for SOLARIS
my $dir;
my $job_dir;
my $file_basename;
my ($server, $sid, $username, $password);
my @deploy_filelist;
my $deploylistfile = $iwhome . "/tmp/deploy." . $jobid;
$| = 1;
#####################################################################################
#
# Here we set where the script will actually be pushing the content
#
#####################################################################################

my $deploy_cfg = "stg_filelist_deploy";

if ($ARGV[0] eq "STAGING")
{
	$environment = "staging";
        $deploy_cfg = "stg_filelist_deploy";
        $dir = "/appl/oas1";
	$job_dir = $dir."/".$jobid;
	$email_to = "stag";

}
elsif ($ARGV[0] eq "PRODUCTION")
{
	$environment = "production";
        $deploy_cfg = "prd_filelist_deploy";
        $dir = "/appl/publishing/production/outbound";
	$job_dir = $dir."/".$jobid;
	$email_to = "stag";
}
else
{
	$task->CallBack(1, "User did not specify STAGING or PRODUCTION.");
}

#########################################################################################
#
# If you are debugging this code I would start with looking at the logfile
#
#########################################################################################

chmod($mode, $logfile);
open (LOG, ">>$logfile");
print LOG "\n============================ $date: START OF LOG FOR DEPLOY For Job $jobid =====================\n";
print LOG "TMP: $tmp\n";
print LOG "DIR: $dir\n";

`rm -r $job_dir` if (-e $job_dir);
mkdir ($job_dir, 0777) || die "$date: could not create $job_dir";
chmod (0775,$job_dir) || die "$date: could not chmod $job_dir";
mkdir ("$job_dir/data", 0777) || die "$date: could not create $job_dir/data";
chmod (0775,"$job_dir/data") || die "$date: could not chmod $job_dir/data";
chdir ("$job_dir") || die "$date: could not change directory to $job_dir/data";
print LOG "Before pwd\n";
my $location = `pwd`;
print LOG "PWD: $location";


#
#  Here we check to see if the task is valid.  If not we need to report it
#
if (!($task->IsValid())) {
	print LOG "$date - ERROR: THIS DEPLOY TASK FOR JOB $job IS NOT VALID!!!\n";
	close LOG;
	exit 1;
}

@files = $task->GetFiles();
print LOG "Files: @files\n";
##########################################################################################
#
# Here we need to generate each of the builder.xml files.  This file will contain only one
# <item></item> element.  To get this we use a while statement to loop through the XML
# documents attached to the workflow (NOTE: If the file does not end with a ".xml" extension
# we will skip it).
#
# If the line of the file starts with "<Item" we know this is a new item and we set our flag to
# the name of the .swf file we want to create.  We open the builder.xml file to write to and
# start printing to the file.  We then move onto the next line.
#
# If the keep skipping lines until we find a "</Item>" tag.  We now know we have found the end
# of the item.  We finish with the builder.xml, close the filehandle, set the $flag to "0"
# and, finally, delete all of the unnessary files and directories
#
#
##########################################################################################
#copy the necessary files to the appropriate area

my $cimdir="/appl/publishing/cim";
my $cmd="cp $cimdir/*.dtd $cimdir/*.ent $cimdir/*.xsl $cimdir/*.swt $cimdir/*.properties $cimdir/lookups.xml .";
print LOG "$cmd\n";
`$cmd`;


for (my $i = 0; $i < @files; $i++)
{
        next unless ($files[$i] =~ /xml$/);

        my $full_doc = CTB::RegEx::full_doc("$area/$files[$i]");

        $file_basename = basename($files[$i]);
        print LOG "Base Name: $file_basename\n";

        push @xml_files, $full_doc;
        open (OUT, ">$job_dir/data/$file_basename") || die "Can't open $job_dir/data/$file_basename: $!\n";
        print OUT $full_doc;
        close OUT;

        #  Here is where we get the image list

	   @images = CTB::RegEx::get_images($full_doc);
           push @deploy_filelist, @images;

        # Here we get the items


        ($gi, $grade, %items) = CTB::XML::get_items("$files[$i]", $area);

        while ( ($k,$v) = each %items ) {
        	push @item_id, $k;
	    	open (FILE, ">$job_dir/$k.xml");
	    	print FILE $v;
	    	close FILE;
	}

}


open(DEPLOYLIST, ">$deploylistfile") || die("[w] '$deploylistfile' ($!)\n");

        for (my $i = 0; $i <= @deploy_filelist; ++$i) {
            my($f) = $deploy_filelist[$i];
            $f =~ tr|\\|/|;
            print DEPLOYLIST "$f\n";
            print LOG "IMAGE: $f\n";
        }

close (DEPLOYLIST);






#=====================================================================
# Now setup OpenDeploy command
#=====================================================================
#=====================================================================
# Now setup OpenDeploy command
#=====================================================================
if ($environment eq "production") {
	my(@odcmd) = &CTB::OD::create_prd_cmd($odhome, $deploy_cfg, $jobid, $area, "no", $deploylistfile);
	open(ODCMD, ">>$odcmdfile");
	
	foreach (@odcmd) {
		print LOG "\nOD_COMMAND: $_\n";

		print ODCMD "#################### $jobid ####################\n";
		print ODCMD "$_\n";
	}
	
	close ODCMD;
	chown iwuser, oasgrp, $odcmdfile;
	$mode = 0777; chmod $mode, $odcmdfile;




}
else {
	my($odcmd) = &CTB::OD::create_stg_cmd($odhome, $deploy_cfg, $jobid, $area, "no", $deploylistfile);

	print LOG "OD COMMAND: $odcmd\n";
	#=====================================================================
	# Run the deployment
	#=====================================================================

		    my $ret = CTB::OD::execute($odcmd);




	if ($ret != 0) {

		$error_flag = 1;
		$email_log .= "OpenDeploy failed deploying the following files:\n";
		$email_log .= join("\n", @deploy_filelist);
		$email_log .= "\n";
	}
}

$date = localtime();


for (my $j=0;$j < @item_id;$j++) {
	print LOG "Item File: $dir/$item_id[$j].xml\n";
	#copy the file for jgen

	# This is where we prepare for FOP and JGEN

	&CTB::RegEx::parse4fop("$item_id[$j].xml");
	copy("$item_id[$j].xml", "compdisp.xml");
	&CTB::RegEx::parse4jgen("compdisp.xml");

	# todo: unify these three blocks to call a single parameterized subroutine

	my @jgen_ret = &CTB::CIM::run_jgen("$item_id[$j].swf");
	my $jgen_logline = &CTB::CIM::logline($jobid, $item_id[$j], "JGEN", $jgen_ret[0]);
    print LOG $jgen_logline;
    print LOG "$jgen_ret[1]\n";
	if ($jgen_ret[0] != 0) {
		$error_flag = 1;
    }
    if ($jgen_ret[0]  || $email_successful_items) {
	    $email_log .= $jgen_logline;
	}

	my @fop_ret = &CTB::CIM::run_fop("$item_id[$j].xml");
    my $fop_logline = &CTB::CIM::logline($jobid, $item_id[$j], "FOP", $fop_ret[0]);
    print LOG $fop_logine;
    print LOG "$fop_ret[1]\n";
	if ($fop_ret[0] != 0) {
		$error_flag = 1;
    }
    if ($fop_ret[0]  || $email_successful_items) {
        $email_log .= $fop_logline;
    }

	if ($ARGV[0] eq "STAGING") {

	    my @cim_ret = &CTB::CIM::run_cim($environment, "$item_id[$j].xml", "$item_id[$j].swf", "$item_id[$j].pdf");
        my $cim_logline = &CTB::CIM::logline($jobid, $item_id[$j], "CIM", $cim_ret[0], $cim_ret[2]);
        print LOG $cim_logline;
        print LOG "$cim_ret[1]\n";
		if ($cim_ret[0] != 0) {
			$error_flag = 1;
		}
        if ($cim_ret[0]  || $email_successful_items) {
		    $email_log .= $cim_logline;
		}
	}
	if ($email_successful_items || $jgen_ret[0] || $fop_ret[0] || $cim_ret[0]) {
	    $email_log .= "\n";
	}

	print LOG "$date: Finishing up $item_id[$j]\n\n";

	#Delete the compdisp file
	unlink "compdisp.xml";
	unlink "compdisp.xml.orig";
}

chdir $job_dir;
$mode = 0755; chmod $mode, <*.*>;
`chown -R iwuser $job_dir`;
`chgrp -R oasgrp $job_dir`;
`chmod -R 775 $job_dir`;

#
# Here we clean up temp files
#

unlink "$job_dir/FOP_Interface.xsl";
unlink "$job_dir/cab_iak.swt";
unlink "$job_dir/R2_Flash_UI.dtd";
unlink <*.fo>;
unlink <*.tmp>;
unlink <*.orig>;
unlink <*.ps>;
# unlink "data";

$date = localtime();

if ($error_flag == 1) {
	my @to = &CTB::Email::get_address($email_to);

    foreach my $i (@to) {
	    print LOG "EMAIL ADDRESS: $i\n";
    }
    if ($environment eq "staging") {
	&CTB::Email::send_email("sherry_erskine\@ctb.com", "Deployment to Content QA for job $jobid: some items rejected", $email_log, @to);
    }
    elsif ($environment eq "production") {
        &CTB::Email::send_email("sherry_erskine\@ctb.com", "Setting up the OAS cron deployment for job $jobid: some items rejected", $email_log, @to);
    }
    else {
        &CTB::Email::send_email("sherry_erskine\@ctb.com", "Deployment to Content QA for job $jobid: some items rejected", $email_log, @to);
    }
    $task->CallBack(0, "Error with Deployment");
    $date = localtime();
    print LOG "\n============================ $date: END OF LOG FOR DEPLOY For Job $jobid =======================\n";
    exit 1;
}
elsif ($always_send_email == 1) {
	my @to = &CTB::Email::get_address($email_to);

    foreach my $i (@to) {
	    print LOG "EMAIL ADDRESS: $i\n";
    }
    if ($environment eq "staging") {
        &CTB::Email::send_email("sherry_erskine\@ctb.com", "Deployment to Content QA for job $jobid: all items succeeded", $email_log, @to);
    }
    elsif ($environment eq "production") {
        &CTB::Email::send_email("sherry_erskine\@ctb.com", "Setting up the OAS cron deployment for job $jobid: all items succeeded", $email_log, @to);
    }
    else {
        &CTB::Email::send_email("sherry_erskine\@ctb.com", "Deployment to Content QA for job $jobid: all items succeeded", $email_log, @to);
    }
}
print LOG "\n============================ $date: END OF LOG FOR DEPLOY For Job $jobid =======================\n";
close LOG;
$mode = 0777; chmod ($mode, $logfile) || die "could not chmod $logfile";


#
# Finally we need to call back to the workflow and it know we are done
#

$task->CallBack(0, "Deployed files.");
exit 0;
