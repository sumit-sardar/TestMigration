package com.ctb.contentBridge.core.util;


import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

/**
 * SafeConnection turns AutoCommit off and prevents it from being turned on
 */
public class SafeConnection implements Connection {
    protected Connection realConnection;

    public SafeConnection(Connection impl) throws SQLException {
        this.realConnection = impl;
        getRealConnection().setAutoCommit(false);
    }

    public Statement createStatement() throws SQLException {
        return realConnection.createStatement();
    }
    
    public Statement createStatement( int resultSetType, int resultSetConcurrency, int resultSetHoldability ) 
    				throws SQLException {
        return realConnection.createStatement( resultSetType, resultSetConcurrency, resultSetHoldability );
    }

    public PreparedStatement prepareStatement(String sql)
        throws SQLException {
        return realConnection.prepareStatement(sql);
    }
    
    public PreparedStatement prepareStatement(String sql,
            			int resultSetType, int resultSetConcurrency,
            			int resultSetHoldability) throws SQLException
	{
        return realConnection.prepareStatement( sql, resultSetType
                				, resultSetConcurrency, resultSetHoldability );
	}
    
    public PreparedStatement prepareStatement(String sql,
            			int autoGeneratedKeys) throws SQLException
	{
        return realConnection.prepareStatement( sql, autoGeneratedKeys );
	}
    
    public PreparedStatement prepareStatement(String sql,
            			int[] columnIndexes) throws SQLException
	{
        return realConnection.prepareStatement( sql, columnIndexes );
	}
    
    public PreparedStatement prepareStatement(String sql,
            			String[] columnNames) throws SQLException
	{
        return realConnection.prepareStatement( sql, columnNames );
	}
    
    public void releaseSavepoint(Savepoint savepoint) throws SQLException
    {
        realConnection.releaseSavepoint( savepoint );
    }
    
    public int getHoldability() throws SQLException
    {
        return realConnection.getHoldability();
    }
    
    public void setHoldability(int holdability) throws SQLException
    {
        realConnection.setHoldability( holdability );
    }
    
    public CallableStatement prepareCall(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability) throws SQLException
    {
        return realConnection.prepareCall( sql, resultSetType, resultSetConcurrency, resultSetHoldability );
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        return realConnection.prepareCall(sql);
    }

    public String nativeSQL(String sql) throws SQLException {
        return realConnection.nativeSQL(sql);
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        throw new RuntimeException("you cannot call setAutoCommit on CIM db connection");
    }

    public boolean getAutoCommit() throws SQLException {
        return realConnection.getAutoCommit();
    }

    /**
     * Safe connection commits
     * @throws java.sql.SQLException
     */
    public void commit() throws SQLException {
        realConnection.commit();
    }

    public void rollback() throws SQLException {
        realConnection.rollback();
    }
    
    public void rollback(Savepoint savepoint) throws SQLException
    {
        realConnection.rollback( savepoint );
    }
    
    public Savepoint setSavepoint() throws SQLException
    {
        return realConnection.setSavepoint();
    }
    
    public Savepoint setSavepoint(String name) throws SQLException
    {
        return realConnection.setSavepoint( name );
    }

    public void close() throws SQLException {
        realConnection.close();
    }

    public boolean isClosed() throws SQLException {
        return realConnection.isClosed();
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        return realConnection.getMetaData();
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        realConnection.setReadOnly(readOnly);
    }

    public boolean isReadOnly() throws SQLException {
        return realConnection.isReadOnly();
    }

    public void setCatalog(String catalog) throws SQLException {
        realConnection.setCatalog(catalog);
    }

    public String getCatalog() throws SQLException {
        return realConnection.getCatalog();
    }

    public void setTransactionIsolation(int level) throws SQLException {
        realConnection.setTransactionIsolation(level);
    }

    public int getTransactionIsolation() throws SQLException {
        return realConnection.getTransactionIsolation();
    }

    public SQLWarning getWarnings() throws SQLException {
        return realConnection.getWarnings();
    }

    public void clearWarnings() throws SQLException {
        realConnection.clearWarnings();
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return realConnection.createStatement(resultSetType,
                resultSetConcurrency);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return realConnection.prepareStatement(sql, resultSetType,
                resultSetConcurrency);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return realConnection.prepareCall(sql, resultSetType,
                resultSetConcurrency);
    }

    public Map getTypeMap() throws SQLException {
        return realConnection.getTypeMap();
    }

    public void setTypeMap(Map map) throws SQLException {
        realConnection.setTypeMap(map);
    }

    protected Connection getRealConnection() {
        if (realConnection instanceof SafeConnection)
            return ((SafeConnection)realConnection).getRealConnection();
        return realConnection;
    }

	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}




