<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:orcl="http://www.springframework.org/schema/data/orcl"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    
    
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/data/orcl
        http://www.springframework.org/schema/data/orcl/spring-data-orcl-1.0.xsd
        http://www.springframework.org/schema/jms
       	http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
       	http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    ">
        
	<!--  
		Load the startup properties
	 -->
    <context:property-placeholder location="classpath:config.properties" />

    <tx:annotation-driven/>


	<!--  ===================================================================================== 
	
			JMS Setup -
			Notes:
				- We need to change the Data Source to the WebLogic data source when we go to
				  production.  We need to find a way to look up the JNDI name and if it doesn't
				  exist, then we directly connect (tomcat).  Otherwise, we should use the bean
				  config.
	
	      ===================================================================================== -->

	<!--  Setup the datasource -->
	<bean id="oasDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
		<property name="dataSource" ref="oasDataSource" />
	</bean>


	<!-- Setup the JMS Connection -->
	<orcl:aq-jms-connection-factory id="jmsConnectionFactory"
		use-local-data-source-transaction="true" 
		native-jdbc-extractor="dbcpNativeJdbcExtractor"
		data-source="oasDataSource" />

	<bean id="dbcpNativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" />


	<!-- Initialize the message handler -->
	<bean id="bmtBlockingQueue" class="com.mhe.ctb.oas.BMTSync.util.BMTBlockingQueue">
		<constructor-arg index="0" value="100"/>
		<constructor-arg index="1" value="15000"/>
	</bean>
	
	<bean id="messageDelegate" class="com.mhe.ctb.oas.BMTSync.spring.jms.NotificationMessageHandler">
		<constructor-arg ref="bmtBlockingQueue" />
	</bean>
	
	<bean id="messageConverter"
		class="org.springframework.data.jdbc.jms.support.converter.oracle.MappingAdtMessageConverter">
		<constructor-arg>
			<bean
				class="org.springframework.data.jdbc.jms.support.oracle.StructDatumMapper">
				<constructor-arg index="0" value="OAS.STUDENT_MESSAGE_TYP" />
				<constructor-arg index="1"
					value="com.mhe.ctb.oas.BMTSync.spring.jms.StudentMessageType" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- Route the message on receiving -->
	<jms:listener-container connection-factory="jmsConnectionFactory"
		concurrency="${jms.bmt.threads:1-4}"
		destination-type="queue"
		transaction-manager="transactionManager"
		message-converter="messageConverter"
		container-class="org.springframework.data.jdbc.jms.listener.oracle.AdtMessageListenerContainer"
		>
		<jms:listener destination="${jms.bmt.publishQueue}" ref="messageDelegate" method="handleMessage" />
	</jms:listener-container>


	<!--  Setup the configuration to send the message -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
	  <property name="connectionFactory" ref="jmsConnectionFactory"/> 
      <!-- <property name="sessionTransacted" value="true"/>  -->
	  <property name="messageConverter" ref="messageConverter"/>
	</bean>

	<!-- Instantiate a poller to read from the queue and post messages to BMT. -->
	<bean id="bmtBlockingQueuePoller" class="com.mhe.ctb.oas.BMTSync.spring.poller.BMTBlockingQueuePoller" depends-on="bmtBlockingQueue">
		<constructor-arg ref="bmtBlockingQueue" /> 
	</bean>

	<!--  ==[ END JMS Setup ]================================================================== -->


    <context:component-scan base-package="com.mhe.ctb.oas"/>
	<mvc:annotation-driven/>


</beans>