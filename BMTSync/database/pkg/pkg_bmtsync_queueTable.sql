CREATE OR REPLACE PACKAGE PKG_BMTSYNC_QUEUETABLE AS
/*
*========================================================================================
* AUTHOR   : SANJEEV B
* CREATED  : 11/12/2014
* MODOIFED : 06/03/2015
* PURPOSE  : THIS PACKAGE WILL CONTAIN PROCEDURES FOR WORKING WITH ORACLE QUEUE TABLES
*========================================================================================
*/
	TYPE REF_CURSOR_TYPE IS REF CURSOR;
	QUEUEPREFIX CONSTANT VARCHAR2(5)      := 'AQ';
	QUEUETABLEPREFIX CONSTANT VARCHAR2(5) := 'AQT';
	
	/*
	 * THIS PROCEDURE WILL ADD QUEUE FOR THE SPECIFIED API IN THE SYSTEM
	*/ 
	PROCEDURE CREATEQUEUESFORAPI
	(
	    pAPI          IN VARCHAR2,
		pMessageType  IN  VARCHAR2,
		PRESULTCURSOR OUT REF_CURSOR_TYPE
	);
	
	
	/*
	* PROCEDURE TO DROP THE QUEUE AND QUEUE TABLES
	*/
	PROCEDURE DROPQUEUE(pQueueName IN VARCHAR2);	

END PKG_BMTSYNC_QUEUETABLE;
/


CREATE OR REPLACE PACKAGE BODY PKG_BMTSYNC_QUEUETABLE AS

    /* 
	* Procedure to Creates Queue and Queue Table for an API
	*/
	PROCEDURE CREATEQUEUESFORAPI
	(
	    pAPI          IN VARCHAR2,
		pMessageType  IN  VARCHAR2,
		PRESULTCURSOR OUT REF_CURSOR_TYPE
	) AS
		VQUEUENAME VARCHAR2(30);
		VQUEUETABLE VARCHAR2(50);
		VSCHEMANAME VARCHAR2(30);
		VSORTLIST   VARCHAR2(100) := 'PRIORITY,ENQ_TIME';
		VRESULTCURSOR REF_CURSOR_TYPE;
		
		VEXISTS NUMBER := 0;

	BEGIN
        -- GRAB THE SCHEMA NAME
		SELECT SYS_CONTEXT('USERENV','SESSION_USER') INTO VSCHEMANAME FROM DUAL;

		--ADD A QUEUE TABLE AND QUEUE 
		VQUEUENAME := QUEUEPREFIX||'_'|| pAPI;
		VQUEUETABLE := VSCHEMANAME || '.' || QUEUETABLEPREFIX ||'_'|| pAPI;
		
        DBMS_OUTPUT.PUT_LINE('VQUEUENAME:'||VQUEUENAME||', VQUEUETABLE:'||VQUEUETABLE);
		
		
		-- MAKE SURE IT DOESN'T ALREADY EXIST   REMOVE THE SCHEMA NAME FROM THE FRONT OF THE QUEUE TABLE NAME
		-- WE PASS IN SCHEMA.TABLE BUT THE USER_TABLES VIEW ONLY HOLDS TABLE
		SELECT COUNT(*) INTO VEXISTS FROM USER_TABLES WHERE LOWER(TABLE_NAME) = LOWER(REPLACE(VQUEUETABLE, VSCHEMANAME||'.', ''));
		DBMS_OUTPUT.PUT_LINE('VQUEUETABLE:'||VQUEUETABLE);
		IF (VEXISTS = 0) THEN
		    
		    DBMS_OUTPUT.PUT_LINE('....QUEUE BEING CREATED');
			DBMS_AQADM.CREATE_QUEUE_TABLE (
				QUEUE_TABLE        	=> VQUEUETABLE,
				QUEUE_PAYLOAD_TYPE 	=> pMessageType,
				SORT_LIST		=> VSORTLIST
			);
			
			DBMS_AQADM.CREATE_QUEUE (
				QUEUE_NAME         => VQUEUENAME,
				QUEUE_TABLE        => VQUEUETABLE
			);

			-- START THE QUEUE
			DBMS_AQADM.START_QUEUE (VQUEUENAME);
			
			DBMS_OUTPUT.PUT_LINE('....QUEUE CREATED');
	    ELSE
		   DBMS_OUTPUT.PUT_LINE('....QUEUE EXISTS IN DATABASE');
		END IF;		
		
		OPEN PRESULTCURSOR FOR SELECT 'SUCCESS' "RESULT" FROM DUAL;

	EXCEPTION
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-20001, 'PKG_BMTSYNC_QUEUETABLE.CREATEQUEUESFORAPI FAILURE :' || SQLERRM(SQLCODE));
	END CREATEQUEUESFORAPI;

	
	/*
	* PROCEDURE TO DROP THE QUEUE AND QUEUE TABLES
	*/
	PROCEDURE DROPQUEUE(pQueueName IN VARCHAR2) AS
	 
			VQUEUENAME VARCHAR2(30);
			VQUEUETABLE VARCHAR2(30);
			VSCHEMANAME VARCHAR2(30);

		CURSOR CURQUEUES IS
		SELECT * FROM USER_QUEUES
		WHERE QUEUE_TYPE = 'NORMAL_QUEUE' AND NAME = pQueueName ;
	BEGIN

		SELECT SYS_CONTEXT('USERENV','SESSION_USER') INTO VSCHEMANAME FROM DUAL;

		FOR REC_QUEUE IN CURQUEUES LOOP

			VQUEUENAME := REC_QUEUE.NAME;
			VQUEUETABLE := REC_QUEUE.QUEUE_TABLE;

			/* STOP THE QUEUE */
			DBMS_AQADM.STOP_QUEUE (VQUEUENAME);

			/* DROP THE QUEUE */
			DBMS_AQADM.DROP_QUEUE (VQUEUENAME);

			/* DROP THE QUEUE TABLE */
			DBMS_AQADM.DROP_QUEUE_TABLE (VQUEUETABLE);

		END LOOP;

	EXCEPTION
	WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'PKG_BMTSYNC_QUEUETABLE.DROPALLQUEUES FAILURE :' || SQLERRM(SQLCODE));
	END DROPQUEUE;

END PKG_BMTSYNC_QUEUETABLE;
/

